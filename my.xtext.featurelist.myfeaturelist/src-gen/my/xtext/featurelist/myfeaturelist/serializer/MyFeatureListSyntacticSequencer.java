/*
 * generated by Xtext 2.32.0
 */
package my.xtext.featurelist.myfeaturelist.serializer;

import com.google.inject.Inject;
import java.util.List;
import my.xtext.featurelist.myfeaturelist.services.MyFeatureListGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class MyFeatureListSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyFeatureListGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Condition_EqualsSignKeyword_1_2_or_GreaterThanSignEqualsSignKeyword_1_1_or_GreaterThanSignKeyword_1_0_or_LessThanSignEqualsSignKeyword_1_3_or_LessThanSignKeyword_1_4;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyFeatureListGrammarAccess) access;
		match_Condition_EqualsSignKeyword_1_2_or_GreaterThanSignEqualsSignKeyword_1_1_or_GreaterThanSignKeyword_1_0_or_LessThanSignEqualsSignKeyword_1_3_or_LessThanSignKeyword_1_4 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getConditionAccess().getEqualsSignKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getConditionAccess().getGreaterThanSignEqualsSignKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getConditionAccess().getGreaterThanSignKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getConditionAccess().getLessThanSignEqualsSignKeyword_1_3()), new TokenAlias(false, false, grammarAccess.getConditionAccess().getLessThanSignKeyword_1_4()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Condition_EqualsSignKeyword_1_2_or_GreaterThanSignEqualsSignKeyword_1_1_or_GreaterThanSignKeyword_1_0_or_LessThanSignEqualsSignKeyword_1_3_or_LessThanSignKeyword_1_4.equals(syntax))
				emit_Condition_EqualsSignKeyword_1_2_or_GreaterThanSignEqualsSignKeyword_1_1_or_GreaterThanSignKeyword_1_0_or_LessThanSignEqualsSignKeyword_1_3_or_LessThanSignKeyword_1_4(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '&gt;' | '&gt;=' | '=' | '&lt;=' | '&lt;'
	 *
	 * This ambiguous syntax occurs at:
	 *     attribute+=[Attribute|ID] (ambiguity) value+=INT
	 
	 * </pre>
	 */
	protected void emit_Condition_EqualsSignKeyword_1_2_or_GreaterThanSignEqualsSignKeyword_1_1_or_GreaterThanSignKeyword_1_0_or_LessThanSignEqualsSignKeyword_1_3_or_LessThanSignKeyword_1_4(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
