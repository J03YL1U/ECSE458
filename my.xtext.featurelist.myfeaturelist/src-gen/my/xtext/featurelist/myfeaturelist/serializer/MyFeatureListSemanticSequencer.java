/*
 * generated by Xtext 2.32.0
 */
package my.xtext.featurelist.myfeaturelist.serializer;

import com.google.inject.Inject;
import java.util.Set;
import my.xtext.featurelist.myfeaturelist.myFeatureList.Attribute;
import my.xtext.featurelist.myfeaturelist.myFeatureList.Concept;
import my.xtext.featurelist.myfeaturelist.myFeatureList.ConceptRef;
import my.xtext.featurelist.myfeaturelist.myFeatureList.Condition;
import my.xtext.featurelist.myfeaturelist.myFeatureList.DotExpression;
import my.xtext.featurelist.myfeaturelist.myFeatureList.Feature;
import my.xtext.featurelist.myfeaturelist.myFeatureList.FeatureList;
import my.xtext.featurelist.myfeaturelist.myFeatureList.MyFeatureListPackage;
import my.xtext.featurelist.myfeaturelist.services.MyFeatureListGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MyFeatureListSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyFeatureListGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyFeatureListPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyFeatureListPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case MyFeatureListPackage.CONCEPT:
				sequence_Concept(context, (Concept) semanticObject); 
				return; 
			case MyFeatureListPackage.CONCEPT_REF:
				sequence_ConceptRef(context, (ConceptRef) semanticObject); 
				return; 
			case MyFeatureListPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case MyFeatureListPackage.DOT_EXPRESSION:
				sequence_DotExpression(context, (DotExpression) semanticObject); 
				return; 
			case MyFeatureListPackage.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case MyFeatureListPackage.FEATURE_LIST:
				sequence_FeatureList(context, (FeatureList) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyFeatureListPackage.Literals.ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyFeatureListPackage.Literals.ATTRIBUTE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DotExpression returns ConceptRef
	 *     DotExpression.DotExpression_1_0 returns ConceptRef
	 *     ConceptRef returns ConceptRef
	 *
	 * Constraint:
	 *     concept=[Concept|ID]
	 * </pre>
	 */
	protected void sequence_ConceptRef(ISerializationContext context, ConceptRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyFeatureListPackage.Literals.CONCEPT_REF__CONCEPT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyFeatureListPackage.Literals.CONCEPT_REF__CONCEPT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConceptRefAccess().getConceptConceptIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MyFeatureListPackage.Literals.CONCEPT_REF__CONCEPT, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Concept returns Concept
	 *
	 * Constraint:
	 *     (name=ID attributes+=Attribute* condition+=Condition?)
	 * </pre>
	 */
	protected void sequence_Concept(ISerializationContext context, Concept semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (attribute+=[Attribute|ID] value+=INT)
	 * </pre>
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DotExpression returns DotExpression
	 *     DotExpression.DotExpression_1_0 returns DotExpression
	 *
	 * Constraint:
	 *     (ref=DotExpression_DotExpression_1_0 tail=[Attribute|ID])
	 * </pre>
	 */
	protected void sequence_DotExpression(ISerializationContext context, DotExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyFeatureListPackage.Literals.DOT_EXPRESSION__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyFeatureListPackage.Literals.DOT_EXPRESSION__REF));
			if (transientValues.isValueTransient(semanticObject, MyFeatureListPackage.Literals.DOT_EXPRESSION__TAIL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyFeatureListPackage.Literals.DOT_EXPRESSION__TAIL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDotExpressionAccess().getDotExpressionRefAction_1_0(), semanticObject.getRef());
		feeder.accept(grammarAccess.getDotExpressionAccess().getTailAttributeIDTerminalRuleCall_1_2_0_1(), semanticObject.eGet(MyFeatureListPackage.Literals.DOT_EXPRESSION__TAIL, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FeatureList returns FeatureList
	 *
	 * Constraint:
	 *     (concept+=Concept* feature+=Feature+)
	 * </pre>
	 */
	protected void sequence_FeatureList(ISerializationContext context, FeatureList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Feature returns Feature
	 *
	 * Constraint:
	 *     (verb+=Verb ref=DotExpression)
	 * </pre>
	 */
	protected void sequence_Feature(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
