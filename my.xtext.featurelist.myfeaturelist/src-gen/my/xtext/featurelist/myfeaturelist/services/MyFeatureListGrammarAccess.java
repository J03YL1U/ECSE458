/*
 * generated by Xtext 2.32.0
 */
package my.xtext.featurelist.myfeaturelist.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyFeatureListGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class FeatureListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "my.xtext.featurelist.myfeaturelist.MyFeatureList.FeatureList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConceptAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConceptConceptParserRuleCall_0_0 = (RuleCall)cConceptAssignment_0.eContents().get(0);
		private final Keyword cFeaturesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeatureFeatureParserRuleCall_2_0 = (RuleCall)cFeatureAssignment_2.eContents().get(0);
		
		//FeatureList:
		//        (concept+=Concept)*
		//    'features' (feature+=Feature)+;
		@Override public ParserRule getRule() { return rule; }
		
		//    (concept+=Concept)*
		//'features' (feature+=Feature)+
		public Group getGroup() { return cGroup; }
		
		//(concept+=Concept)*
		public Assignment getConceptAssignment_0() { return cConceptAssignment_0; }
		
		//Concept
		public RuleCall getConceptConceptParserRuleCall_0_0() { return cConceptConceptParserRuleCall_0_0; }
		
		//'features'
		public Keyword getFeaturesKeyword_1() { return cFeaturesKeyword_1; }
		
		//(feature+=Feature)+
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }
		
		//Feature
		public RuleCall getFeatureFeatureParserRuleCall_2_0() { return cFeatureFeatureParserRuleCall_2_0; }
	}
	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "my.xtext.featurelist.myfeaturelist.MyFeatureList.Concept");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConceptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributeParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_3_1_0 = (RuleCall)cConditionAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Concept:
		//        'concept' name=ID
		//        (attributes+=Attribute)*
		//        ("["condition+=Condition"]")*;
		@Override public ParserRule getRule() { return rule; }
		
		//'concept' name=ID
		//(attributes+=Attribute)*
		//("["condition+=Condition"]")*
		public Group getGroup() { return cGroup; }
		
		//'concept'
		public Keyword getConceptKeyword_0() { return cConceptKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(attributes+=Attribute)*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_0() { return cAttributesAttributeParserRuleCall_2_0; }
		
		//("["condition+=Condition"]")*
		public Group getGroup_3() { return cGroup_3; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//condition+=Condition
		public Assignment getConditionAssignment_3_1() { return cConditionAssignment_3_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_1_0() { return cConditionConditionParserRuleCall_3_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "my.xtext.featurelist.myfeaturelist.MyFeatureList.Attribute");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Attribute:
		//        name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "my.xtext.featurelist.myfeaturelist.MyFeatureList.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAttributeAttributeCrossReference_0_0 = (CrossReference)cAttributeAssignment_0.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cAttributeAttributeCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cLessThanSignKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Condition:
		//        (attribute=[Attribute]) ('>' | '>=' | '=' | '<=' | '<') (value=INT);
		@Override public ParserRule getRule() { return rule; }
		
		//(attribute=[Attribute]) ('>' | '>=' | '=' | '<=' | '<') (value=INT)
		public Group getGroup() { return cGroup; }
		
		//(attribute=[Attribute])
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }
		
		//[Attribute]
		public CrossReference getAttributeAttributeCrossReference_0_0() { return cAttributeAttributeCrossReference_0_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_0_0_1() { return cAttributeAttributeIDTerminalRuleCall_0_0_1; }
		
		//('>' | '>=' | '=' | '<=' | '<')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0() { return cGreaterThanSignKeyword_1_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_1() { return cGreaterThanSignEqualsSignKeyword_1_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_3() { return cLessThanSignEqualsSignKeyword_1_3; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_4() { return cLessThanSignKeyword_1_4; }
		
		//(value=INT)
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "my.xtext.featurelist.myfeaturelist.MyFeatureList.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVerbAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVerbVerbEnumRuleCall_0_0 = (RuleCall)cVerbAssignment_0.eContents().get(0);
		private final Assignment cConceptAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cConceptConceptCrossReference_1_0 = (CrossReference)cConceptAssignment_1.eContents().get(0);
		private final RuleCall cConceptConceptIDTerminalRuleCall_1_0_1 = (RuleCall)cConceptConceptCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cAttributeAttributeCrossReference_2_1_0 = (CrossReference)cAttributeAssignment_2_1.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cAttributeAttributeCrossReference_2_1_0.eContents().get(1);
		
		//Feature:
		//        (verb=Verb) (concept=[Concept])('.'(attribute=[Attribute]))?;
		@Override public ParserRule getRule() { return rule; }
		
		//(verb=Verb) (concept=[Concept])('.'(attribute=[Attribute]))?
		public Group getGroup() { return cGroup; }
		
		//(verb=Verb)
		public Assignment getVerbAssignment_0() { return cVerbAssignment_0; }
		
		//Verb
		public RuleCall getVerbVerbEnumRuleCall_0_0() { return cVerbVerbEnumRuleCall_0_0; }
		
		//(concept=[Concept])
		public Assignment getConceptAssignment_1() { return cConceptAssignment_1; }
		
		//[Concept]
		public CrossReference getConceptConceptCrossReference_1_0() { return cConceptConceptCrossReference_1_0; }
		
		//ID
		public RuleCall getConceptConceptIDTerminalRuleCall_1_0_1() { return cConceptConceptIDTerminalRuleCall_1_0_1; }
		
		//('.'(attribute=[Attribute]))?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//(attribute=[Attribute])
		public Assignment getAttributeAssignment_2_1() { return cAttributeAssignment_2_1; }
		
		//[Attribute]
		public CrossReference getAttributeAttributeCrossReference_2_1_0() { return cAttributeAttributeCrossReference_2_1_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_2_1_0_1() { return cAttributeAttributeIDTerminalRuleCall_2_1_0_1; }
	}
	
	public class VerbElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "my.xtext.featurelist.myfeaturelist.MyFeatureList.Verb");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAddAddKeyword_0_0 = (Keyword)cAddEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRemoveEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRemoveRemoveKeyword_1_0 = (Keyword)cRemoveEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUpdateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUpdateUpdateKeyword_2_0 = (Keyword)cUpdateEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDisplayEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDisplayDisplayKeyword_3_0 = (Keyword)cDisplayEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Verb:
		//        Add | Remove | Update | Display;
		public EnumRule getRule() { return rule; }
		
		//Add | Remove | Update | Display
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Add
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration_0() { return cAddEnumLiteralDeclaration_0; }
		
		public Keyword getAddAddKeyword_0_0() { return cAddAddKeyword_0_0; }
		
		//Remove
		public EnumLiteralDeclaration getRemoveEnumLiteralDeclaration_1() { return cRemoveEnumLiteralDeclaration_1; }
		
		public Keyword getRemoveRemoveKeyword_1_0() { return cRemoveRemoveKeyword_1_0; }
		
		//Update
		public EnumLiteralDeclaration getUpdateEnumLiteralDeclaration_2() { return cUpdateEnumLiteralDeclaration_2; }
		
		public Keyword getUpdateUpdateKeyword_2_0() { return cUpdateUpdateKeyword_2_0; }
		
		//Display
		public EnumLiteralDeclaration getDisplayEnumLiteralDeclaration_3() { return cDisplayEnumLiteralDeclaration_3; }
		
		public Keyword getDisplayDisplayKeyword_3_0() { return cDisplayDisplayKeyword_3_0; }
	}
	
	private final FeatureListElements pFeatureList;
	private final ConceptElements pConcept;
	private final AttributeElements pAttribute;
	private final ConditionElements pCondition;
	private final FeatureElements pFeature;
	private final VerbElements eVerb;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyFeatureListGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFeatureList = new FeatureListElements();
		this.pConcept = new ConceptElements();
		this.pAttribute = new AttributeElements();
		this.pCondition = new ConditionElements();
		this.pFeature = new FeatureElements();
		this.eVerb = new VerbElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("my.xtext.featurelist.myfeaturelist.MyFeatureList".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FeatureList:
	//        (concept+=Concept)*
	//    'features' (feature+=Feature)+;
	public FeatureListElements getFeatureListAccess() {
		return pFeatureList;
	}
	
	public ParserRule getFeatureListRule() {
		return getFeatureListAccess().getRule();
	}
	
	//Concept:
	//        'concept' name=ID
	//        (attributes+=Attribute)*
	//        ("["condition+=Condition"]")*;
	public ConceptElements getConceptAccess() {
		return pConcept;
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}
	
	//Attribute:
	//        name=ID;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Condition:
	//        (attribute=[Attribute]) ('>' | '>=' | '=' | '<=' | '<') (value=INT);
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Feature:
	//        (verb=Verb) (concept=[Concept])('.'(attribute=[Attribute]))?;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//enum Verb:
	//        Add | Remove | Update | Display;
	public VerbElements getVerbAccess() {
		return eVerb;
	}
	
	public EnumRule getVerbRule() {
		return getVerbAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
