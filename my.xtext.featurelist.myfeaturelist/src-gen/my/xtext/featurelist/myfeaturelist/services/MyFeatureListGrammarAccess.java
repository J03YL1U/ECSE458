/*
 * generated by Xtext 2.32.0
 */
package my.xtext.featurelist.myfeaturelist.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyFeatureListGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class FeatureListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "my.xtext.featurelist.myfeaturelist.MyFeatureList.FeatureList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConceptAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConceptConceptParserRuleCall_0_0 = (RuleCall)cConceptAssignment_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureFeatureParserRuleCall_1_0 = (RuleCall)cFeatureAssignment_1.eContents().get(0);
		
		//FeatureList:
		//    (concept+=Concept)*
		//    (feature+=Feature)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(concept+=Concept)*
		//(feature+=Feature)*
		public Group getGroup() { return cGroup; }
		
		//(concept+=Concept)*
		public Assignment getConceptAssignment_0() { return cConceptAssignment_0; }
		
		//Concept
		public RuleCall getConceptConceptParserRuleCall_0_0() { return cConceptConceptParserRuleCall_0_0; }
		
		//(feature+=Feature)*
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }
		
		//Feature
		public RuleCall getFeatureFeatureParserRuleCall_1_0() { return cFeatureFeatureParserRuleCall_1_0; }
	}
	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "my.xtext.featurelist.myfeaturelist.MyFeatureList.Concept");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConceptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesConceptParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		
		//Concept:
		//    'concept' name=ID
		//    (attributes+=Concept);
		@Override public ParserRule getRule() { return rule; }
		
		//'concept' name=ID
		//(attributes+=Concept)
		public Group getGroup() { return cGroup; }
		
		//'concept'
		public Keyword getConceptKeyword_0() { return cConceptKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(attributes+=Concept)
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }
		
		//Concept
		public RuleCall getAttributesConceptParserRuleCall_2_0() { return cAttributesConceptParserRuleCall_2_0; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "my.xtext.featurelist.myfeaturelist.MyFeatureList.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVerbAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVerbVerbEnumRuleCall_2_0 = (RuleCall)cVerbAssignment_2.eContents().get(0);
		private final Assignment cConceptAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConceptConceptParserRuleCall_3_0 = (RuleCall)cConceptAssignment_3.eContents().get(0);
		
		//Feature:
		//    'feature' name=ID
		//    (verb=Verb)
		//    (concept=Concept);
		@Override public ParserRule getRule() { return rule; }
		
		//'feature' name=ID
		//(verb=Verb)
		//(concept=Concept)
		public Group getGroup() { return cGroup; }
		
		//'feature'
		public Keyword getFeatureKeyword_0() { return cFeatureKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(verb=Verb)
		public Assignment getVerbAssignment_2() { return cVerbAssignment_2; }
		
		//Verb
		public RuleCall getVerbVerbEnumRuleCall_2_0() { return cVerbVerbEnumRuleCall_2_0; }
		
		//(concept=Concept)
		public Assignment getConceptAssignment_3() { return cConceptAssignment_3; }
		
		//Concept
		public RuleCall getConceptConceptParserRuleCall_3_0() { return cConceptConceptParserRuleCall_3_0; }
	}
	
	public class VerbElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "my.xtext.featurelist.myfeaturelist.MyFeatureList.Verb");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAddAddKeyword_0_0 = (Keyword)cAddEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRemoveEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRemoveRemoveKeyword_1_0 = (Keyword)cRemoveEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUpdateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUpdateUpdateKeyword_2_0 = (Keyword)cUpdateEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDisplayEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDisplayDisplayKeyword_3_0 = (Keyword)cDisplayEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Verb:
		//    Add | Remove | Update | Display;
		public EnumRule getRule() { return rule; }
		
		//Add | Remove | Update | Display
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Add
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration_0() { return cAddEnumLiteralDeclaration_0; }
		
		public Keyword getAddAddKeyword_0_0() { return cAddAddKeyword_0_0; }
		
		//Remove
		public EnumLiteralDeclaration getRemoveEnumLiteralDeclaration_1() { return cRemoveEnumLiteralDeclaration_1; }
		
		public Keyword getRemoveRemoveKeyword_1_0() { return cRemoveRemoveKeyword_1_0; }
		
		//Update
		public EnumLiteralDeclaration getUpdateEnumLiteralDeclaration_2() { return cUpdateEnumLiteralDeclaration_2; }
		
		public Keyword getUpdateUpdateKeyword_2_0() { return cUpdateUpdateKeyword_2_0; }
		
		//Display
		public EnumLiteralDeclaration getDisplayEnumLiteralDeclaration_3() { return cDisplayEnumLiteralDeclaration_3; }
		
		public Keyword getDisplayDisplayKeyword_3_0() { return cDisplayDisplayKeyword_3_0; }
	}
	
	private final FeatureListElements pFeatureList;
	private final ConceptElements pConcept;
	private final FeatureElements pFeature;
	private final VerbElements eVerb;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyFeatureListGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFeatureList = new FeatureListElements();
		this.pConcept = new ConceptElements();
		this.pFeature = new FeatureElements();
		this.eVerb = new VerbElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("my.xtext.featurelist.myfeaturelist.MyFeatureList".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FeatureList:
	//    (concept+=Concept)*
	//    (feature+=Feature)*;
	public FeatureListElements getFeatureListAccess() {
		return pFeatureList;
	}
	
	public ParserRule getFeatureListRule() {
		return getFeatureListAccess().getRule();
	}
	
	//Concept:
	//    'concept' name=ID
	//    (attributes+=Concept);
	public ConceptElements getConceptAccess() {
		return pConcept;
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}
	
	//Feature:
	//    'feature' name=ID
	//    (verb=Verb)
	//    (concept=Concept);
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//enum Verb:
	//    Add | Remove | Update | Display;
	public VerbElements getVerbAccess() {
		return eVerb;
	}
	
	public EnumRule getVerbRule() {
		return getVerbAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
