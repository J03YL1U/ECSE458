/*
 * generated by Xtext 2.32.0
 */
package my.xtext.featurelist.myfeaturelist.scoping;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import my.xtext.featurelist.myfeaturelist.myFeatureList.*;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
	public class MyFeatureListScopeProvider extends AbstractDeclarativeScopeProvider {
		@Override
	    public IScope getScope(EObject object, EReference ref) {
	    if (ref == MyFeatureListPackage.Literals.FEATURE__ATTRIBUTE) {
	     Feature feature = (Feature) object;
	        return Scopes.scopeFor(feature.getConcept().getAttributes());
	    }
	    if (ref == MyFeatureListPackage.Literals.CONSTRAINT__ATTRIBUTE) {
		     Constraint constraint = (Constraint) object;
		        return Scopes.scopeFor(constraint.getConcept().getAttributes());
		    }
	    if (ref == MyFeatureListPackage.Literals.KEY__ATTRIBUTE) {
		     Key key = (Key) object;
		        return Scopes.scopeFor(key.getConcept().getAttributes());
		    }
	    if (ref == MyFeatureListPackage.Literals.PROPERTY__ATTRIBUTE) {
		     Property property = (Property) object;
		        return Scopes.scopeFor(property.getConcept().getAttributes());
		    }
	    return super.getScope(object, ref);
	}     
}
