/*
 * generated by Xtext 2.32.0
 */
grammar InternalMyFeatureList;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package my.xtext.featurelist.myfeaturelist.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package my.xtext.featurelist.myfeaturelist.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import my.xtext.featurelist.myfeaturelist.services.MyFeatureListGrammarAccess;

}
@parser::members {
	private MyFeatureListGrammarAccess grammarAccess;

	public void setGrammarAccess(MyFeatureListGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleFeatureList
entryRuleFeatureList
:
{ before(grammarAccess.getFeatureListRule()); }
	 ruleFeatureList
{ after(grammarAccess.getFeatureListRule()); } 
	 EOF 
;

// Rule FeatureList
ruleFeatureList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureListAccess().getGroup()); }
		(rule__FeatureList__Group__0)
		{ after(grammarAccess.getFeatureListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConcept
entryRuleConcept
:
{ before(grammarAccess.getConceptRule()); }
	 ruleConcept
{ after(grammarAccess.getConceptRule()); } 
	 EOF 
;

// Rule Concept
ruleConcept 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConceptAccess().getGroup()); }
		(rule__Concept__Group__0)
		{ after(grammarAccess.getConceptAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getGroup()); }
		(rule__Attribute__Group__0)
		{ after(grammarAccess.getAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getNameAssignment()); }
		(rule__Type__NameAssignment)
		{ after(grammarAccess.getTypeAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getGroup()); }
		(rule__Condition__Group__0)
		{ after(grammarAccess.getConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraint
entryRuleConstraint
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintAccess().getGroup()); }
		(rule__Constraint__Group__0)
		{ after(grammarAccess.getConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleKey
entryRuleKey
:
{ before(grammarAccess.getKeyRule()); }
	 ruleKey
{ after(grammarAccess.getKeyRule()); } 
	 EOF 
;

// Rule Key
ruleKey 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKeyAccess().getGroup()); }
		(rule__Key__Group__0)
		{ after(grammarAccess.getKeyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeature
entryRuleFeature
:
{ before(grammarAccess.getFeatureRule()); }
	 ruleFeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule Feature
ruleFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureAccess().getGroup()); }
		(rule__Feature__Group__0)
		{ after(grammarAccess.getFeatureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Verb
ruleVerb
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerbAccess().getAlternatives()); }
		(rule__Verb__Alternatives)
		{ after(grammarAccess.getVerbAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getGreaterThanSignKeyword_0_0()); }
		'>'
		{ after(grammarAccess.getConditionAccess().getGreaterThanSignKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getGreaterThanSignEqualsSignKeyword_0_1()); }
		'>='
		{ after(grammarAccess.getConditionAccess().getGreaterThanSignEqualsSignKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getEqualsSignKeyword_0_2()); }
		'='
		{ after(grammarAccess.getConditionAccess().getEqualsSignKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getLessThanSignEqualsSignKeyword_0_3()); }
		'<='
		{ after(grammarAccess.getConditionAccess().getLessThanSignEqualsSignKeyword_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getConditionAccess().getLessThanSignKeyword_0_4()); }
		'<'
		{ after(grammarAccess.getConditionAccess().getLessThanSignKeyword_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verb__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerbAccess().getAddEnumLiteralDeclaration_0()); }
		('Add')
		{ after(grammarAccess.getVerbAccess().getAddEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getVerbAccess().getRemoveEnumLiteralDeclaration_1()); }
		('Remove')
		{ after(grammarAccess.getVerbAccess().getRemoveEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getVerbAccess().getUpdateEnumLiteralDeclaration_2()); }
		('Update')
		{ after(grammarAccess.getVerbAccess().getUpdateEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getVerbAccess().getDisplayEnumLiteralDeclaration_3()); }
		('Display')
		{ after(grammarAccess.getVerbAccess().getDisplayEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureList__Group__0__Impl
	rule__FeatureList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureListAccess().getConceptAssignment_0()); }
	(rule__FeatureList__ConceptAssignment_0)*
	{ after(grammarAccess.getFeatureListAccess().getConceptAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureList__Group__1__Impl
	rule__FeatureList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureListAccess().getConstraintsKeyword_1()); }
	'constraints'
	{ after(grammarAccess.getFeatureListAccess().getConstraintsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureList__Group__2__Impl
	rule__FeatureList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getFeatureListAccess().getConstraintAssignment_2()); }
		(rule__FeatureList__ConstraintAssignment_2)
		{ after(grammarAccess.getFeatureListAccess().getConstraintAssignment_2()); }
	)
	(
		{ before(grammarAccess.getFeatureListAccess().getConstraintAssignment_2()); }
		(rule__FeatureList__ConstraintAssignment_2)*
		{ after(grammarAccess.getFeatureListAccess().getConstraintAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureList__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureList__Group__3__Impl
	rule__FeatureList__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureList__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureListAccess().getKeysKeyword_3()); }
	'keys'
	{ after(grammarAccess.getFeatureListAccess().getKeysKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureList__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureList__Group__4__Impl
	rule__FeatureList__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureList__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getFeatureListAccess().getKeyAssignment_4()); }
		(rule__FeatureList__KeyAssignment_4)
		{ after(grammarAccess.getFeatureListAccess().getKeyAssignment_4()); }
	)
	(
		{ before(grammarAccess.getFeatureListAccess().getKeyAssignment_4()); }
		(rule__FeatureList__KeyAssignment_4)*
		{ after(grammarAccess.getFeatureListAccess().getKeyAssignment_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureList__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureList__Group__5__Impl
	rule__FeatureList__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureList__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureListAccess().getFeaturesKeyword_5()); }
	'features'
	{ after(grammarAccess.getFeatureListAccess().getFeaturesKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureList__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureList__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureList__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getFeatureListAccess().getFeatureAssignment_6()); }
		(rule__FeatureList__FeatureAssignment_6)
		{ after(grammarAccess.getFeatureListAccess().getFeatureAssignment_6()); }
	)
	(
		{ before(grammarAccess.getFeatureListAccess().getFeatureAssignment_6()); }
		(rule__FeatureList__FeatureAssignment_6)*
		{ after(grammarAccess.getFeatureListAccess().getFeatureAssignment_6()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Concept__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concept__Group__0__Impl
	rule__Concept__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptAccess().getConceptKeyword_0()); }
	'concept'
	{ after(grammarAccess.getConceptAccess().getConceptKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concept__Group__1__Impl
	rule__Concept__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptAccess().getNameAssignment_1()); }
	(rule__Concept__NameAssignment_1)
	{ after(grammarAccess.getConceptAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concept__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptAccess().getAttributesAssignment_2()); }
	(rule__Concept__AttributesAssignment_2)*
	{ after(grammarAccess.getConceptAccess().getAttributesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getTypeAssignment_0()); }
	(rule__Attribute__TypeAssignment_0)
	{ after(grammarAccess.getAttributeAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getNameAssignment_1()); }
	(rule__Attribute__NameAssignment_1)
	{ after(grammarAccess.getAttributeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getAlternatives_0()); }
	(rule__Condition__Alternatives_0)
	{ after(grammarAccess.getConditionAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getValueAssignment_1()); }
	(rule__Condition__ValueAssignment_1)
	{ after(grammarAccess.getConditionAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__0__Impl
	rule__Constraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getConceptAssignment_0()); }
	(rule__Constraint__ConceptAssignment_0)
	{ after(grammarAccess.getConstraintAccess().getConceptAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__1__Impl
	rule__Constraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getGroup_1()); }
	(rule__Constraint__Group_1__0)
	{ after(grammarAccess.getConstraintAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getConditionAssignment_2()); }
	(rule__Constraint__ConditionAssignment_2)
	{ after(grammarAccess.getConstraintAccess().getConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group_1__0__Impl
	rule__Constraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getConstraintAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getAttributeAssignment_1_1()); }
	(rule__Constraint__AttributeAssignment_1_1)
	{ after(grammarAccess.getConstraintAccess().getAttributeAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Key__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Key__Group__0__Impl
	rule__Key__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyAccess().getConceptAssignment_0()); }
	(rule__Key__ConceptAssignment_0)
	{ after(grammarAccess.getKeyAccess().getConceptAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Key__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyAccess().getGroup_1()); }
	(rule__Key__Group_1__0)
	{ after(grammarAccess.getKeyAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Key__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Key__Group_1__0__Impl
	rule__Key__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getKeyAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Key__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyAccess().getAttributeAssignment_1_1()); }
	(rule__Key__AttributeAssignment_1_1)
	{ after(grammarAccess.getKeyAccess().getAttributeAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Feature__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group__0__Impl
	rule__Feature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getVerbAssignment_0()); }
	(rule__Feature__VerbAssignment_0)
	{ after(grammarAccess.getFeatureAccess().getVerbAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group__1__Impl
	rule__Feature__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getConceptAssignment_1()); }
	(rule__Feature__ConceptAssignment_1)
	{ after(grammarAccess.getFeatureAccess().getConceptAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getGroup_2()); }
	(rule__Feature__Group_2__0)?
	{ after(grammarAccess.getFeatureAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Feature__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group_2__0__Impl
	rule__Feature__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getFullStopKeyword_2_0()); }
	'.'
	{ after(grammarAccess.getFeatureAccess().getFullStopKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getAttributeAssignment_2_1()); }
	(rule__Feature__AttributeAssignment_2_1)
	{ after(grammarAccess.getFeatureAccess().getAttributeAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureList__ConceptAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureListAccess().getConceptConceptParserRuleCall_0_0()); }
		ruleConcept
		{ after(grammarAccess.getFeatureListAccess().getConceptConceptParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureList__ConstraintAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureListAccess().getConstraintConstraintParserRuleCall_2_0()); }
		ruleConstraint
		{ after(grammarAccess.getFeatureListAccess().getConstraintConstraintParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureList__KeyAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureListAccess().getKeyKeyParserRuleCall_4_0()); }
		ruleKey
		{ after(grammarAccess.getFeatureListAccess().getKeyKeyParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureList__FeatureAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureListAccess().getFeatureFeatureParserRuleCall_6_0()); }
		ruleFeature
		{ after(grammarAccess.getFeatureListAccess().getFeatureFeatureParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConceptAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__AttributesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptAccess().getAttributesAttributeParserRuleCall_2_0()); }
		ruleAttribute
		{ after(grammarAccess.getConceptAccess().getAttributesAttributeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getTypeTypeParserRuleCall_0_0()); }
		ruleType
		{ after(grammarAccess.getAttributeAccess().getTypeTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getConditionAccess().getValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ConceptAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getConceptConceptCrossReference_0_0()); }
		(
			{ before(grammarAccess.getConstraintAccess().getConceptConceptIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getConstraintAccess().getConceptConceptIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getConstraintAccess().getConceptConceptCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__AttributeAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getAttributeAttributeCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getConstraintAccess().getAttributeAttributeIDTerminalRuleCall_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getConstraintAccess().getAttributeAttributeIDTerminalRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getConstraintAccess().getAttributeAttributeCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getConditionConditionParserRuleCall_2_0()); }
		ruleCondition
		{ after(grammarAccess.getConstraintAccess().getConditionConditionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__ConceptAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeyAccess().getConceptConceptCrossReference_0_0()); }
		(
			{ before(grammarAccess.getKeyAccess().getConceptConceptIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getKeyAccess().getConceptConceptIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getKeyAccess().getConceptConceptCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__AttributeAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeyAccess().getAttributeAttributeCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getKeyAccess().getAttributeAttributeIDTerminalRuleCall_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getKeyAccess().getAttributeAttributeIDTerminalRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getKeyAccess().getAttributeAttributeCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__VerbAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureAccess().getVerbVerbEnumRuleCall_0_0()); }
		ruleVerb
		{ after(grammarAccess.getFeatureAccess().getVerbVerbEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__ConceptAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureAccess().getConceptConceptCrossReference_1_0()); }
		(
			{ before(grammarAccess.getFeatureAccess().getConceptConceptIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFeatureAccess().getConceptConceptIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getFeatureAccess().getConceptConceptCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__AttributeAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureAccess().getAttributeAttributeCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getFeatureAccess().getAttributeAttributeIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFeatureAccess().getAttributeAttributeIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getFeatureAccess().getAttributeAttributeCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
