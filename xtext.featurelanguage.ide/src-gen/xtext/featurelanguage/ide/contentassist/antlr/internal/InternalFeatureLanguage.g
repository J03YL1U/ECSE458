/*
 * generated by Xtext 2.32.0
 */
grammar InternalFeatureLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package xtext.featurelanguage.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package xtext.featurelanguage.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import xtext.featurelanguage.services.FeatureLanguageGrammarAccess;

}
@parser::members {
	private FeatureLanguageGrammarAccess grammarAccess;

	public void setGrammarAccess(FeatureLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleFeatureLanguage
entryRuleFeatureLanguage
:
{ before(grammarAccess.getFeatureLanguageRule()); }
	 ruleFeatureLanguage
{ after(grammarAccess.getFeatureLanguageRule()); } 
	 EOF 
;

// Rule FeatureLanguage
ruleFeatureLanguage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureLanguageAccess().getGroup()); }
		(rule__FeatureLanguage__Group__0)
		{ after(grammarAccess.getFeatureLanguageAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConcept
entryRuleConcept
:
{ before(grammarAccess.getConceptRule()); }
	 ruleConcept
{ after(grammarAccess.getConceptRule()); } 
	 EOF 
;

// Rule Concept
ruleConcept 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConceptAccess().getGroup()); }
		(rule__Concept__Group__0)
		{ after(grammarAccess.getConceptAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCharacteristic
entryRuleCharacteristic
:
{ before(grammarAccess.getCharacteristicRule()); }
	 ruleCharacteristic
{ after(grammarAccess.getCharacteristicRule()); } 
	 EOF 
;

// Rule Characteristic
ruleCharacteristic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCharacteristicAccess().getGroup()); }
		(rule__Characteristic__Group__0)
		{ after(grammarAccess.getCharacteristicAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getNameAssignment()); }
		(rule__Type__NameAssignment)
		{ after(grammarAccess.getTypeAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getGroup()); }
		(rule__Condition__Group__0)
		{ after(grammarAccess.getConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraint
entryRuleConstraint
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintAccess().getGroup()); }
		(rule__Constraint__Group__0)
		{ after(grammarAccess.getConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleKey
entryRuleKey
:
{ before(grammarAccess.getKeyRule()); }
	 ruleKey
{ after(grammarAccess.getKeyRule()); } 
	 EOF 
;

// Rule Key
ruleKey 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKeyAccess().getGroup()); }
		(rule__Key__Group__0)
		{ after(grammarAccess.getKeyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConceptProperty
entryRuleConceptProperty
:
{ before(grammarAccess.getConceptPropertyRule()); }
	 ruleConceptProperty
{ after(grammarAccess.getConceptPropertyRule()); } 
	 EOF 
;

// Rule ConceptProperty
ruleConceptProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConceptPropertyAccess().getGroup()); }
		(rule__ConceptProperty__Group__0)
		{ after(grammarAccess.getConceptPropertyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCharacteristicProperty
entryRuleCharacteristicProperty
:
{ before(grammarAccess.getCharacteristicPropertyRule()); }
	 ruleCharacteristicProperty
{ after(grammarAccess.getCharacteristicPropertyRule()); } 
	 EOF 
;

// Rule CharacteristicProperty
ruleCharacteristicProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCharacteristicPropertyAccess().getGroup()); }
		(rule__CharacteristicProperty__Group__0)
		{ after(grammarAccess.getCharacteristicPropertyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProperty
entryRuleProperty
:
{ before(grammarAccess.getPropertyRule()); }
	 ruleProperty
{ after(grammarAccess.getPropertyRule()); } 
	 EOF 
;

// Rule Property
ruleProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyAccess().getAlternatives()); }
		(rule__Property__Alternatives)
		{ after(grammarAccess.getPropertyAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeature
entryRuleFeature
:
{ before(grammarAccess.getFeatureRule()); }
	 ruleFeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule Feature
ruleFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureAccess().getGroup()); }
		(rule__Feature__Group__0)
		{ after(grammarAccess.getFeatureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Verb
ruleVerb
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerbAccess().getAlternatives()); }
		(rule__Verb__Alternatives)
		{ after(grammarAccess.getVerbAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule KeyType
ruleKeyType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeyTypeAccess().getAlternatives()); }
		(rule__KeyType__Alternatives)
		{ after(grammarAccess.getKeyTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ComparisonOperator
ruleComparisonOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getAlternatives()); }
		(rule__ComparisonOperator__Alternatives)
		{ after(grammarAccess.getComparisonOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Characteristic__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCharacteristicAccess().getMultiplicityAssignment_2_0()); }
		(rule__Characteristic__MultiplicityAssignment_2_0)
		{ after(grammarAccess.getCharacteristicAccess().getMultiplicityAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getCharacteristicAccess().getGroup_2_1()); }
		(rule__Characteristic__Group_2_1__0)
		{ after(grammarAccess.getCharacteristicAccess().getGroup_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getConceptPropertyParserRuleCall_0()); }
		ruleConceptProperty
		{ after(grammarAccess.getPropertyAccess().getConceptPropertyParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPropertyAccess().getCharacteristicPropertyParserRuleCall_1()); }
		ruleCharacteristicProperty
		{ after(grammarAccess.getPropertyAccess().getCharacteristicPropertyParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verb__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerbAccess().getAddEnumLiteralDeclaration_0()); }
		('Add')
		{ after(grammarAccess.getVerbAccess().getAddEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getVerbAccess().getRemoveEnumLiteralDeclaration_1()); }
		('Remove')
		{ after(grammarAccess.getVerbAccess().getRemoveEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getVerbAccess().getUpdateEnumLiteralDeclaration_2()); }
		('Update')
		{ after(grammarAccess.getVerbAccess().getUpdateEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getVerbAccess().getDisplayEnumLiteralDeclaration_3()); }
		('Display')
		{ after(grammarAccess.getVerbAccess().getDisplayEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeyTypeAccess().getUniqueEnumLiteralDeclaration_0()); }
		('unique')
		{ after(grammarAccess.getKeyTypeAccess().getUniqueEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getKeyTypeAccess().getAutouniqueEnumLiteralDeclaration_1()); }
		('autounique')
		{ after(grammarAccess.getKeyTypeAccess().getAutouniqueEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getKeyTypeAccess().getIndexEnumLiteralDeclaration_2()); }
		('index')
		{ after(grammarAccess.getKeyTypeAccess().getIndexEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getGreaterThanEnumLiteralDeclaration_0()); }
		('>')
		{ after(grammarAccess.getComparisonOperatorAccess().getGreaterThanEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getGreaterThanOrEqualEnumLiteralDeclaration_1()); }
		('>=')
		{ after(grammarAccess.getComparisonOperatorAccess().getGreaterThanOrEqualEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getEqualEnumLiteralDeclaration_2()); }
		('=')
		{ after(grammarAccess.getComparisonOperatorAccess().getEqualEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getLessThanOrEqualEnumLiteralDeclaration_3()); }
		('<=')
		{ after(grammarAccess.getComparisonOperatorAccess().getLessThanOrEqualEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonOperatorAccess().getLessThanEnumLiteralDeclaration_4()); }
		('<')
		{ after(grammarAccess.getComparisonOperatorAccess().getLessThanEnumLiteralDeclaration_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureLanguage__Group__0__Impl
	rule__FeatureLanguage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureLanguageAccess().getConceptsAssignment_0()); }
	(rule__FeatureLanguage__ConceptsAssignment_0)*
	{ after(grammarAccess.getFeatureLanguageAccess().getConceptsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureLanguage__Group__1__Impl
	rule__FeatureLanguage__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureLanguageAccess().getConstraintsKeyword_1()); }
	'constraints'
	{ after(grammarAccess.getFeatureLanguageAccess().getConstraintsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureLanguage__Group__2__Impl
	rule__FeatureLanguage__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureLanguageAccess().getConstraintsAssignment_2()); }
	(rule__FeatureLanguage__ConstraintsAssignment_2)*
	{ after(grammarAccess.getFeatureLanguageAccess().getConstraintsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureLanguage__Group__3__Impl
	rule__FeatureLanguage__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureLanguageAccess().getKeysKeyword_3()); }
	'keys'
	{ after(grammarAccess.getFeatureLanguageAccess().getKeysKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureLanguage__Group__4__Impl
	rule__FeatureLanguage__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureLanguageAccess().getKeysAssignment_4()); }
	(rule__FeatureLanguage__KeysAssignment_4)*
	{ after(grammarAccess.getFeatureLanguageAccess().getKeysAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureLanguage__Group__5__Impl
	rule__FeatureLanguage__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureLanguageAccess().getPropertiesKeyword_5()); }
	'properties'
	{ after(grammarAccess.getFeatureLanguageAccess().getPropertiesKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureLanguage__Group__6__Impl
	rule__FeatureLanguage__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureLanguageAccess().getPropertiesAssignment_6()); }
	(rule__FeatureLanguage__PropertiesAssignment_6)*
	{ after(grammarAccess.getFeatureLanguageAccess().getPropertiesAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureLanguage__Group__7__Impl
	rule__FeatureLanguage__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureLanguageAccess().getFeaturesKeyword_7()); }
	'features'
	{ after(grammarAccess.getFeatureLanguageAccess().getFeaturesKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FeatureLanguage__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureLanguageAccess().getFeaturesAssignment_8()); }
	(rule__FeatureLanguage__FeaturesAssignment_8)*
	{ after(grammarAccess.getFeatureLanguageAccess().getFeaturesAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Concept__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concept__Group__0__Impl
	rule__Concept__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptAccess().getConceptKeyword_0()); }
	'concept'
	{ after(grammarAccess.getConceptAccess().getConceptKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concept__Group__1__Impl
	rule__Concept__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptAccess().getNameAssignment_1()); }
	(rule__Concept__NameAssignment_1)
	{ after(grammarAccess.getConceptAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concept__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptAccess().getCharacteristicsAssignment_2()); }
	(rule__Concept__CharacteristicsAssignment_2)*
	{ after(grammarAccess.getConceptAccess().getCharacteristicsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Characteristic__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Characteristic__Group__0__Impl
	rule__Characteristic__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Characteristic__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCharacteristicAccess().getTypeAssignment_0()); }
	(rule__Characteristic__TypeAssignment_0)
	{ after(grammarAccess.getCharacteristicAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Characteristic__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Characteristic__Group__1__Impl
	rule__Characteristic__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Characteristic__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCharacteristicAccess().getNameAssignment_1()); }
	(rule__Characteristic__NameAssignment_1)
	{ after(grammarAccess.getCharacteristicAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Characteristic__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Characteristic__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Characteristic__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCharacteristicAccess().getAlternatives_2()); }
	(rule__Characteristic__Alternatives_2)?
	{ after(grammarAccess.getCharacteristicAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Characteristic__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Characteristic__Group_2_1__0__Impl
	rule__Characteristic__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Characteristic__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCharacteristicAccess().getLeftCurlyBracketKeyword_2_1_0()); }
	'{'
	{ after(grammarAccess.getCharacteristicAccess().getLeftCurlyBracketKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Characteristic__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Characteristic__Group_2_1__1__Impl
	rule__Characteristic__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Characteristic__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCharacteristicAccess().getLiteralsAssignment_2_1_1()); }
	(rule__Characteristic__LiteralsAssignment_2_1_1)*
	{ after(grammarAccess.getCharacteristicAccess().getLiteralsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Characteristic__Group_2_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Characteristic__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Characteristic__Group_2_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCharacteristicAccess().getRightCurlyBracketKeyword_2_1_2()); }
	'}'
	{ after(grammarAccess.getCharacteristicAccess().getRightCurlyBracketKeyword_2_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getOperatorAssignment_0()); }
	(rule__Condition__OperatorAssignment_0)
	{ after(grammarAccess.getConditionAccess().getOperatorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getValueAssignment_1()); }
	(rule__Condition__ValueAssignment_1)
	{ after(grammarAccess.getConditionAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__0__Impl
	rule__Constraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getConceptAssignment_0()); }
	(rule__Constraint__ConceptAssignment_0)
	{ after(grammarAccess.getConstraintAccess().getConceptAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__1__Impl
	rule__Constraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getGroup_1()); }
	(rule__Constraint__Group_1__0)
	{ after(grammarAccess.getConstraintAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__2__Impl
	rule__Constraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getConditionAssignment_2()); }
	(rule__Constraint__ConditionAssignment_2)
	{ after(grammarAccess.getConstraintAccess().getConditionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getErrorMsgAssignment_3()); }
	(rule__Constraint__ErrorMsgAssignment_3)
	{ after(grammarAccess.getConstraintAccess().getErrorMsgAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group_1__0__Impl
	rule__Constraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getConstraintAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getCharacteristicAssignment_1_1()); }
	(rule__Constraint__CharacteristicAssignment_1_1)
	{ after(grammarAccess.getConstraintAccess().getCharacteristicAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Key__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Key__Group__0__Impl
	rule__Key__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyAccess().getConceptAssignment_0()); }
	(rule__Key__ConceptAssignment_0)
	{ after(grammarAccess.getKeyAccess().getConceptAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Key__Group__1__Impl
	rule__Key__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyAccess().getGroup_1()); }
	(rule__Key__Group_1__0)
	{ after(grammarAccess.getKeyAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Key__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyAccess().getKeyTypeAssignment_2()); }
	(rule__Key__KeyTypeAssignment_2)
	{ after(grammarAccess.getKeyAccess().getKeyTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Key__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Key__Group_1__0__Impl
	rule__Key__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getKeyAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Key__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyAccess().getCharacteristicAssignment_1_1()); }
	(rule__Key__CharacteristicAssignment_1_1)
	{ after(grammarAccess.getKeyAccess().getCharacteristicAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConceptProperty__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConceptProperty__Group__0__Impl
	rule__ConceptProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptProperty__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptPropertyAccess().getConceptAssignment_0()); }
	(rule__ConceptProperty__ConceptAssignment_0)
	{ after(grammarAccess.getConceptPropertyAccess().getConceptAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptProperty__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConceptProperty__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptProperty__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptPropertyAccess().getIsRootAssignment_1()); }
	(rule__ConceptProperty__IsRootAssignment_1)
	{ after(grammarAccess.getConceptPropertyAccess().getIsRootAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CharacteristicProperty__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CharacteristicProperty__Group__0__Impl
	rule__CharacteristicProperty__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacteristicProperty__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCharacteristicPropertyAccess().getConceptAssignment_0()); }
	(rule__CharacteristicProperty__ConceptAssignment_0)
	{ after(grammarAccess.getCharacteristicPropertyAccess().getConceptAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacteristicProperty__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CharacteristicProperty__Group__1__Impl
	rule__CharacteristicProperty__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacteristicProperty__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCharacteristicPropertyAccess().getGroup_1()); }
	(rule__CharacteristicProperty__Group_1__0)
	{ after(grammarAccess.getCharacteristicPropertyAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacteristicProperty__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CharacteristicProperty__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacteristicProperty__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCharacteristicPropertyAccess().getIsLazyAssignment_2()); }
	(rule__CharacteristicProperty__IsLazyAssignment_2)
	{ after(grammarAccess.getCharacteristicPropertyAccess().getIsLazyAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CharacteristicProperty__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CharacteristicProperty__Group_1__0__Impl
	rule__CharacteristicProperty__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacteristicProperty__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCharacteristicPropertyAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getCharacteristicPropertyAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacteristicProperty__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CharacteristicProperty__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacteristicProperty__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCharacteristicPropertyAccess().getCharacteristicAssignment_1_1()); }
	(rule__CharacteristicProperty__CharacteristicAssignment_1_1)
	{ after(grammarAccess.getCharacteristicPropertyAccess().getCharacteristicAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Feature__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group__0__Impl
	rule__Feature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getVerbAssignment_0()); }
	(rule__Feature__VerbAssignment_0)
	{ after(grammarAccess.getFeatureAccess().getVerbAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group__1__Impl
	rule__Feature__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getConceptAssignment_1()); }
	(rule__Feature__ConceptAssignment_1)
	{ after(grammarAccess.getFeatureAccess().getConceptAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getGroup_2()); }
	(rule__Feature__Group_2__0)?
	{ after(grammarAccess.getFeatureAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Feature__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group_2__0__Impl
	rule__Feature__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getFullStopKeyword_2_0()); }
	'.'
	{ after(grammarAccess.getFeatureAccess().getFullStopKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getCharacteristicAssignment_2_1()); }
	(rule__Feature__CharacteristicAssignment_2_1)
	{ after(grammarAccess.getFeatureAccess().getCharacteristicAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FeatureLanguage__ConceptsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureLanguageAccess().getConceptsConceptParserRuleCall_0_0()); }
		ruleConcept
		{ after(grammarAccess.getFeatureLanguageAccess().getConceptsConceptParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__ConstraintsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureLanguageAccess().getConstraintsConstraintParserRuleCall_2_0()); }
		ruleConstraint
		{ after(grammarAccess.getFeatureLanguageAccess().getConstraintsConstraintParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__KeysAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureLanguageAccess().getKeysKeyParserRuleCall_4_0()); }
		ruleKey
		{ after(grammarAccess.getFeatureLanguageAccess().getKeysKeyParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__PropertiesAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureLanguageAccess().getPropertiesPropertyParserRuleCall_6_0()); }
		ruleProperty
		{ after(grammarAccess.getFeatureLanguageAccess().getPropertiesPropertyParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureLanguage__FeaturesAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureLanguageAccess().getFeaturesFeatureParserRuleCall_8_0()); }
		ruleFeature
		{ after(grammarAccess.getFeatureLanguageAccess().getFeaturesFeatureParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConceptAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__CharacteristicsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptAccess().getCharacteristicsCharacteristicParserRuleCall_2_0()); }
		ruleCharacteristic
		{ after(grammarAccess.getConceptAccess().getCharacteristicsCharacteristicParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Characteristic__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCharacteristicAccess().getTypeTypeParserRuleCall_0_0()); }
		ruleType
		{ after(grammarAccess.getCharacteristicAccess().getTypeTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Characteristic__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCharacteristicAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getCharacteristicAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Characteristic__MultiplicityAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCharacteristicAccess().getMultiplicityMULTIPLICITYTerminalRuleCall_2_0_0()); }
		RULE_MULTIPLICITY
		{ after(grammarAccess.getCharacteristicAccess().getMultiplicityMULTIPLICITYTerminalRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Characteristic__LiteralsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCharacteristicAccess().getLiteralsSTRINGTerminalRuleCall_2_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getCharacteristicAccess().getLiteralsSTRINGTerminalRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__OperatorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getOperatorComparisonOperatorEnumRuleCall_0_0()); }
		ruleComparisonOperator
		{ after(grammarAccess.getConditionAccess().getOperatorComparisonOperatorEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getConditionAccess().getValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ConceptAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getConceptConceptCrossReference_0_0()); }
		(
			{ before(grammarAccess.getConstraintAccess().getConceptConceptIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getConstraintAccess().getConceptConceptIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getConstraintAccess().getConceptConceptCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__CharacteristicAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getCharacteristicCharacteristicCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getConstraintAccess().getCharacteristicCharacteristicIDTerminalRuleCall_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getConstraintAccess().getCharacteristicCharacteristicIDTerminalRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getConstraintAccess().getCharacteristicCharacteristicCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ConditionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getConditionConditionParserRuleCall_2_0()); }
		ruleCondition
		{ after(grammarAccess.getConstraintAccess().getConditionConditionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ErrorMsgAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getErrorMsgSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getConstraintAccess().getErrorMsgSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__ConceptAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeyAccess().getConceptConceptCrossReference_0_0()); }
		(
			{ before(grammarAccess.getKeyAccess().getConceptConceptIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getKeyAccess().getConceptConceptIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getKeyAccess().getConceptConceptCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__CharacteristicAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeyAccess().getCharacteristicCharacteristicCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getKeyAccess().getCharacteristicCharacteristicIDTerminalRuleCall_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getKeyAccess().getCharacteristicCharacteristicIDTerminalRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getKeyAccess().getCharacteristicCharacteristicCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__KeyTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeyAccess().getKeyTypeKeyTypeEnumRuleCall_2_0()); }
		ruleKeyType
		{ after(grammarAccess.getKeyAccess().getKeyTypeKeyTypeEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptProperty__ConceptAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptPropertyAccess().getConceptConceptCrossReference_0_0()); }
		(
			{ before(grammarAccess.getConceptPropertyAccess().getConceptConceptIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getConceptPropertyAccess().getConceptConceptIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getConceptPropertyAccess().getConceptConceptCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptProperty__IsRootAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptPropertyAccess().getIsRootRootKeyword_1_0()); }
		(
			{ before(grammarAccess.getConceptPropertyAccess().getIsRootRootKeyword_1_0()); }
			'root'
			{ after(grammarAccess.getConceptPropertyAccess().getIsRootRootKeyword_1_0()); }
		)
		{ after(grammarAccess.getConceptPropertyAccess().getIsRootRootKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacteristicProperty__ConceptAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCharacteristicPropertyAccess().getConceptConceptCrossReference_0_0()); }
		(
			{ before(grammarAccess.getCharacteristicPropertyAccess().getConceptConceptIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCharacteristicPropertyAccess().getConceptConceptIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getCharacteristicPropertyAccess().getConceptConceptCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacteristicProperty__CharacteristicAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCharacteristicPropertyAccess().getCharacteristicCharacteristicCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getCharacteristicPropertyAccess().getCharacteristicCharacteristicIDTerminalRuleCall_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCharacteristicPropertyAccess().getCharacteristicCharacteristicIDTerminalRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getCharacteristicPropertyAccess().getCharacteristicCharacteristicCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CharacteristicProperty__IsLazyAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCharacteristicPropertyAccess().getIsLazyLazyKeyword_2_0()); }
		(
			{ before(grammarAccess.getCharacteristicPropertyAccess().getIsLazyLazyKeyword_2_0()); }
			'lazy'
			{ after(grammarAccess.getCharacteristicPropertyAccess().getIsLazyLazyKeyword_2_0()); }
		)
		{ after(grammarAccess.getCharacteristicPropertyAccess().getIsLazyLazyKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__VerbAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureAccess().getVerbVerbEnumRuleCall_0_0()); }
		ruleVerb
		{ after(grammarAccess.getFeatureAccess().getVerbVerbEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__ConceptAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureAccess().getConceptConceptCrossReference_1_0()); }
		(
			{ before(grammarAccess.getFeatureAccess().getConceptConceptIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFeatureAccess().getConceptConceptIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getFeatureAccess().getConceptConceptCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__CharacteristicAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureAccess().getCharacteristicCharacteristicCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getFeatureAccess().getCharacteristicCharacteristicIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFeatureAccess().getCharacteristicCharacteristicIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getFeatureAccess().getCharacteristicCharacteristicCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_MULTIPLICITY : (RULE_INT|'*') '..' (RULE_INT|'*');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
