/*
 * generated by Xtext 2.32.0
 */
package xtext.featurelanguage.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FeatureLanguageGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class FeatureLanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.featurelanguage.FeatureLanguage.FeatureLanguage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConceptsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConceptsConceptParserRuleCall_0_0 = (RuleCall)cConceptsAssignment_0.eContents().get(0);
		private final Keyword cConstraintsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstraintsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintsConstraintParserRuleCall_2_0 = (RuleCall)cConstraintsAssignment_2.eContents().get(0);
		private final Keyword cKeysKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cKeysAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKeysKeyParserRuleCall_4_0 = (RuleCall)cKeysAssignment_4.eContents().get(0);
		private final Keyword cPropertiesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPropertiesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPropertiesPropertyParserRuleCall_6_0 = (RuleCall)cPropertiesAssignment_6.eContents().get(0);
		private final Keyword cFeaturesKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cFeaturesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFeaturesFeatureParserRuleCall_8_0 = (RuleCall)cFeaturesAssignment_8.eContents().get(0);
		
		//FeatureLanguage:
		//        (concepts+=Concept)*
		//        'constraints' (constraints+=Constraint)*
		//        'keys' (keys+=Key)*
		//        'properties' (properties+=Property)*
		//        'features' (features+=Feature)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(concepts+=Concept)*
		//'constraints' (constraints+=Constraint)*
		//'keys' (keys+=Key)*
		//'properties' (properties+=Property)*
		//'features' (features+=Feature)*
		public Group getGroup() { return cGroup; }
		
		//(concepts+=Concept)*
		public Assignment getConceptsAssignment_0() { return cConceptsAssignment_0; }
		
		//Concept
		public RuleCall getConceptsConceptParserRuleCall_0_0() { return cConceptsConceptParserRuleCall_0_0; }
		
		//'constraints'
		public Keyword getConstraintsKeyword_1() { return cConstraintsKeyword_1; }
		
		//(constraints+=Constraint)*
		public Assignment getConstraintsAssignment_2() { return cConstraintsAssignment_2; }
		
		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_2_0() { return cConstraintsConstraintParserRuleCall_2_0; }
		
		//'keys'
		public Keyword getKeysKeyword_3() { return cKeysKeyword_3; }
		
		//(keys+=Key)*
		public Assignment getKeysAssignment_4() { return cKeysAssignment_4; }
		
		//Key
		public RuleCall getKeysKeyParserRuleCall_4_0() { return cKeysKeyParserRuleCall_4_0; }
		
		//'properties'
		public Keyword getPropertiesKeyword_5() { return cPropertiesKeyword_5; }
		
		//(properties+=Property)*
		public Assignment getPropertiesAssignment_6() { return cPropertiesAssignment_6; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_6_0() { return cPropertiesPropertyParserRuleCall_6_0; }
		
		//'features'
		public Keyword getFeaturesKeyword_7() { return cFeaturesKeyword_7; }
		
		//(features+=Feature)*
		public Assignment getFeaturesAssignment_8() { return cFeaturesAssignment_8; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_8_0() { return cFeaturesFeatureParserRuleCall_8_0; }
	}
	public class NamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.featurelanguage.FeatureLanguage.NamedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConceptParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharacteristicParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NamedElement:
		//    Concept | Characteristic;
		@Override public ParserRule getRule() { return rule; }
		
		//Concept | Characteristic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Concept
		public RuleCall getConceptParserRuleCall_0() { return cConceptParserRuleCall_0; }
		
		//Characteristic
		public RuleCall getCharacteristicParserRuleCall_1() { return cCharacteristicParserRuleCall_1; }
	}
	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.featurelanguage.FeatureLanguage.Concept");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConceptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCharacteristicsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCharacteristicsCharacteristicParserRuleCall_2_0 = (RuleCall)cCharacteristicsAssignment_2.eContents().get(0);
		
		//Concept:
		//        'concept' name=ID
		//        (characteristics+=Characteristic)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'concept' name=ID
		//(characteristics+=Characteristic)*
		public Group getGroup() { return cGroup; }
		
		//'concept'
		public Keyword getConceptKeyword_0() { return cConceptKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(characteristics+=Characteristic)*
		public Assignment getCharacteristicsAssignment_2() { return cCharacteristicsAssignment_2; }
		
		//Characteristic
		public RuleCall getCharacteristicsCharacteristicParserRuleCall_2_0() { return cCharacteristicsCharacteristicParserRuleCall_2_0; }
	}
	public class CharacteristicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.featurelanguage.FeatureLanguage.Characteristic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cMultiplicityAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cMultiplicityMULTIPLICITYTerminalRuleCall_2_0_0 = (RuleCall)cMultiplicityAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cLiteralsSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cLiteralsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//Characteristic:
		//        /*(typeName=STRING)*/ (type=Type) name=ID ((multiplicity=MULTIPLICITY) | '{' (literals+=STRING)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		///*(typeName=STRING)*/ (type=Type) name=ID ((multiplicity=MULTIPLICITY) | '{' (literals+=STRING)* '}')?
		public Group getGroup() { return cGroup; }
		
		///*(typeName=STRING)*/ (type=Type)
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//((multiplicity=MULTIPLICITY) | '{' (literals+=STRING)* '}')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(multiplicity=MULTIPLICITY)
		public Assignment getMultiplicityAssignment_2_0() { return cMultiplicityAssignment_2_0; }
		
		//MULTIPLICITY
		public RuleCall getMultiplicityMULTIPLICITYTerminalRuleCall_2_0_0() { return cMultiplicityMULTIPLICITYTerminalRuleCall_2_0_0; }
		
		//'{' (literals+=STRING)* '}'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }
		
		//(literals+=STRING)*
		public Assignment getLiteralsAssignment_2_1_1() { return cLiteralsAssignment_2_1_1; }
		
		//STRING
		public RuleCall getLiteralsSTRINGTerminalRuleCall_2_1_1_0() { return cLiteralsSTRINGTerminalRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.featurelanguage.FeatureLanguage.Type");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Type:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.featurelanguage.FeatureLanguage.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorComparisonOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Condition:
		//        operator=(ComparisonOperator) (value=INT);
		@Override public ParserRule getRule() { return rule; }
		
		//operator=(ComparisonOperator) (value=INT)
		public Group getGroup() { return cGroup; }
		
		//operator=(ComparisonOperator)
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//(ComparisonOperator)
		public RuleCall getOperatorComparisonOperatorEnumRuleCall_0_0() { return cOperatorComparisonOperatorEnumRuleCall_0_0; }
		
		//(value=INT)
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.featurelanguage.FeatureLanguage.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConceptAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cConceptConceptCrossReference_0_0 = (CrossReference)cConceptAssignment_0.eContents().get(0);
		private final RuleCall cConceptConceptIDTerminalRuleCall_0_0_1 = (RuleCall)cConceptConceptCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCharacteristicAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cCharacteristicCharacteristicCrossReference_1_1_0 = (CrossReference)cCharacteristicAssignment_1_1.eContents().get(0);
		private final RuleCall cCharacteristicCharacteristicIDTerminalRuleCall_1_1_0_1 = (RuleCall)cCharacteristicCharacteristicCrossReference_1_1_0.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Assignment cErrorMsgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cErrorMsgSTRINGTerminalRuleCall_3_0 = (RuleCall)cErrorMsgAssignment_3.eContents().get(0);
		
		//Constraint:
		//    (concept=[Concept])('.'(characteristic=[Characteristic])) (condition=Condition) (errorMsg=STRING);
		@Override public ParserRule getRule() { return rule; }
		
		//(concept=[Concept])('.'(characteristic=[Characteristic])) (condition=Condition) (errorMsg=STRING)
		public Group getGroup() { return cGroup; }
		
		//(concept=[Concept])
		public Assignment getConceptAssignment_0() { return cConceptAssignment_0; }
		
		//[Concept]
		public CrossReference getConceptConceptCrossReference_0_0() { return cConceptConceptCrossReference_0_0; }
		
		//ID
		public RuleCall getConceptConceptIDTerminalRuleCall_0_0_1() { return cConceptConceptIDTerminalRuleCall_0_0_1; }
		
		//('.'(characteristic=[Characteristic]))
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//(characteristic=[Characteristic])
		public Assignment getCharacteristicAssignment_1_1() { return cCharacteristicAssignment_1_1; }
		
		//[Characteristic]
		public CrossReference getCharacteristicCharacteristicCrossReference_1_1_0() { return cCharacteristicCharacteristicCrossReference_1_1_0; }
		
		//ID
		public RuleCall getCharacteristicCharacteristicIDTerminalRuleCall_1_1_0_1() { return cCharacteristicCharacteristicIDTerminalRuleCall_1_1_0_1; }
		
		//(condition=Condition)
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }
		
		//(errorMsg=STRING)
		public Assignment getErrorMsgAssignment_3() { return cErrorMsgAssignment_3; }
		
		//STRING
		public RuleCall getErrorMsgSTRINGTerminalRuleCall_3_0() { return cErrorMsgSTRINGTerminalRuleCall_3_0; }
	}
	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.featurelanguage.FeatureLanguage.Key");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConceptAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cConceptConceptCrossReference_0_0 = (CrossReference)cConceptAssignment_0.eContents().get(0);
		private final RuleCall cConceptConceptIDTerminalRuleCall_0_0_1 = (RuleCall)cConceptConceptCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCharacteristicAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cCharacteristicCharacteristicCrossReference_1_1_0 = (CrossReference)cCharacteristicAssignment_1_1.eContents().get(0);
		private final RuleCall cCharacteristicCharacteristicIDTerminalRuleCall_1_1_0_1 = (RuleCall)cCharacteristicCharacteristicCrossReference_1_1_0.eContents().get(1);
		private final Assignment cKeyTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeyTypeKeyTypeEnumRuleCall_2_0 = (RuleCall)cKeyTypeAssignment_2.eContents().get(0);
		
		//Key:
		//    (concept=[Concept])('.'(characteristic=[Characteristic])) (keyType=KeyType);
		@Override public ParserRule getRule() { return rule; }
		
		//(concept=[Concept])('.'(characteristic=[Characteristic])) (keyType=KeyType)
		public Group getGroup() { return cGroup; }
		
		//(concept=[Concept])
		public Assignment getConceptAssignment_0() { return cConceptAssignment_0; }
		
		//[Concept]
		public CrossReference getConceptConceptCrossReference_0_0() { return cConceptConceptCrossReference_0_0; }
		
		//ID
		public RuleCall getConceptConceptIDTerminalRuleCall_0_0_1() { return cConceptConceptIDTerminalRuleCall_0_0_1; }
		
		//('.'(characteristic=[Characteristic]))
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//(characteristic=[Characteristic])
		public Assignment getCharacteristicAssignment_1_1() { return cCharacteristicAssignment_1_1; }
		
		//[Characteristic]
		public CrossReference getCharacteristicCharacteristicCrossReference_1_1_0() { return cCharacteristicCharacteristicCrossReference_1_1_0; }
		
		//ID
		public RuleCall getCharacteristicCharacteristicIDTerminalRuleCall_1_1_0_1() { return cCharacteristicCharacteristicIDTerminalRuleCall_1_1_0_1; }
		
		//(keyType=KeyType)
		public Assignment getKeyTypeAssignment_2() { return cKeyTypeAssignment_2; }
		
		//KeyType
		public RuleCall getKeyTypeKeyTypeEnumRuleCall_2_0() { return cKeyTypeKeyTypeEnumRuleCall_2_0; }
	}
	public class ConceptPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.featurelanguage.FeatureLanguage.ConceptProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConceptAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cConceptConceptCrossReference_0_0 = (CrossReference)cConceptAssignment_0.eContents().get(0);
		private final RuleCall cConceptConceptIDTerminalRuleCall_0_0_1 = (RuleCall)cConceptConceptCrossReference_0_0.eContents().get(1);
		private final Assignment cIsRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsRootRootKeyword_1_0 = (Keyword)cIsRootAssignment_1.eContents().get(0);
		
		// //possibly add a 'unique (Concept)' to signify uniqueness in that concept only
		//ConceptProperty:
		//    (concept=[Concept]) isRoot?='root';
		@Override public ParserRule getRule() { return rule; }
		
		//(concept=[Concept]) isRoot?='root'
		public Group getGroup() { return cGroup; }
		
		//(concept=[Concept])
		public Assignment getConceptAssignment_0() { return cConceptAssignment_0; }
		
		//[Concept]
		public CrossReference getConceptConceptCrossReference_0_0() { return cConceptConceptCrossReference_0_0; }
		
		//ID
		public RuleCall getConceptConceptIDTerminalRuleCall_0_0_1() { return cConceptConceptIDTerminalRuleCall_0_0_1; }
		
		//isRoot?='root'
		public Assignment getIsRootAssignment_1() { return cIsRootAssignment_1; }
		
		//'root'
		public Keyword getIsRootRootKeyword_1_0() { return cIsRootRootKeyword_1_0; }
	}
	public class CharacteristicPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.featurelanguage.FeatureLanguage.CharacteristicProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConceptAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cConceptConceptCrossReference_0_0 = (CrossReference)cConceptAssignment_0.eContents().get(0);
		private final RuleCall cConceptConceptIDTerminalRuleCall_0_0_1 = (RuleCall)cConceptConceptCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCharacteristicAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cCharacteristicCharacteristicCrossReference_1_1_0 = (CrossReference)cCharacteristicAssignment_1_1.eContents().get(0);
		private final RuleCall cCharacteristicCharacteristicIDTerminalRuleCall_1_1_0_1 = (RuleCall)cCharacteristicCharacteristicCrossReference_1_1_0.eContents().get(1);
		private final Assignment cIsLazyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsLazyLazyKeyword_2_0 = (Keyword)cIsLazyAssignment_2.eContents().get(0);
		
		//CharacteristicProperty:
		//    (concept=[Concept])('.'(characteristic=[Characteristic])) isLazy?='lazy';
		@Override public ParserRule getRule() { return rule; }
		
		//(concept=[Concept])('.'(characteristic=[Characteristic])) isLazy?='lazy'
		public Group getGroup() { return cGroup; }
		
		//(concept=[Concept])
		public Assignment getConceptAssignment_0() { return cConceptAssignment_0; }
		
		//[Concept]
		public CrossReference getConceptConceptCrossReference_0_0() { return cConceptConceptCrossReference_0_0; }
		
		//ID
		public RuleCall getConceptConceptIDTerminalRuleCall_0_0_1() { return cConceptConceptIDTerminalRuleCall_0_0_1; }
		
		//('.'(characteristic=[Characteristic]))
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//(characteristic=[Characteristic])
		public Assignment getCharacteristicAssignment_1_1() { return cCharacteristicAssignment_1_1; }
		
		//[Characteristic]
		public CrossReference getCharacteristicCharacteristicCrossReference_1_1_0() { return cCharacteristicCharacteristicCrossReference_1_1_0; }
		
		//ID
		public RuleCall getCharacteristicCharacteristicIDTerminalRuleCall_1_1_0_1() { return cCharacteristicCharacteristicIDTerminalRuleCall_1_1_0_1; }
		
		//isLazy?='lazy'
		public Assignment getIsLazyAssignment_2() { return cIsLazyAssignment_2; }
		
		//'lazy'
		public Keyword getIsLazyLazyKeyword_2_0() { return cIsLazyLazyKeyword_2_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.featurelanguage.FeatureLanguage.Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConceptPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharacteristicPropertyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Property:
		//    ConceptProperty | CharacteristicProperty;
		@Override public ParserRule getRule() { return rule; }
		
		//ConceptProperty | CharacteristicProperty
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConceptProperty
		public RuleCall getConceptPropertyParserRuleCall_0() { return cConceptPropertyParserRuleCall_0; }
		
		//CharacteristicProperty
		public RuleCall getCharacteristicPropertyParserRuleCall_1() { return cCharacteristicPropertyParserRuleCall_1; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.featurelanguage.FeatureLanguage.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVerbAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVerbVerbEnumRuleCall_0_0 = (RuleCall)cVerbAssignment_0.eContents().get(0);
		private final Assignment cConceptAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cConceptConceptCrossReference_1_0 = (CrossReference)cConceptAssignment_1.eContents().get(0);
		private final RuleCall cConceptConceptIDTerminalRuleCall_1_0_1 = (RuleCall)cConceptConceptCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCharacteristicAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cCharacteristicCharacteristicCrossReference_2_1_0 = (CrossReference)cCharacteristicAssignment_2_1.eContents().get(0);
		private final RuleCall cCharacteristicCharacteristicIDTerminalRuleCall_2_1_0_1 = (RuleCall)cCharacteristicCharacteristicCrossReference_2_1_0.eContents().get(1);
		
		//Feature:
		//        (verb=Verb) (concept=[Concept])('.'(characteristic=[Characteristic]))?;
		@Override public ParserRule getRule() { return rule; }
		
		//(verb=Verb) (concept=[Concept])('.'(characteristic=[Characteristic]))?
		public Group getGroup() { return cGroup; }
		
		//(verb=Verb)
		public Assignment getVerbAssignment_0() { return cVerbAssignment_0; }
		
		//Verb
		public RuleCall getVerbVerbEnumRuleCall_0_0() { return cVerbVerbEnumRuleCall_0_0; }
		
		//(concept=[Concept])
		public Assignment getConceptAssignment_1() { return cConceptAssignment_1; }
		
		//[Concept]
		public CrossReference getConceptConceptCrossReference_1_0() { return cConceptConceptCrossReference_1_0; }
		
		//ID
		public RuleCall getConceptConceptIDTerminalRuleCall_1_0_1() { return cConceptConceptIDTerminalRuleCall_1_0_1; }
		
		//('.'(characteristic=[Characteristic]))?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//(characteristic=[Characteristic])
		public Assignment getCharacteristicAssignment_2_1() { return cCharacteristicAssignment_2_1; }
		
		//[Characteristic]
		public CrossReference getCharacteristicCharacteristicCrossReference_2_1_0() { return cCharacteristicCharacteristicCrossReference_2_1_0; }
		
		//ID
		public RuleCall getCharacteristicCharacteristicIDTerminalRuleCall_2_1_0_1() { return cCharacteristicCharacteristicIDTerminalRuleCall_2_1_0_1; }
	}
	
	public class VerbElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.featurelanguage.FeatureLanguage.Verb");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAddAddKeyword_0_0 = (Keyword)cAddEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRemoveEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRemoveRemoveKeyword_1_0 = (Keyword)cRemoveEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUpdateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUpdateUpdateKeyword_2_0 = (Keyword)cUpdateEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDisplayEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDisplayDisplayKeyword_3_0 = (Keyword)cDisplayEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Verb:
		//        Add | Remove | Update | Display;
		public EnumRule getRule() { return rule; }
		
		//Add | Remove | Update | Display
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Add
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration_0() { return cAddEnumLiteralDeclaration_0; }
		
		public Keyword getAddAddKeyword_0_0() { return cAddAddKeyword_0_0; }
		
		//Remove
		public EnumLiteralDeclaration getRemoveEnumLiteralDeclaration_1() { return cRemoveEnumLiteralDeclaration_1; }
		
		public Keyword getRemoveRemoveKeyword_1_0() { return cRemoveRemoveKeyword_1_0; }
		
		//Update
		public EnumLiteralDeclaration getUpdateEnumLiteralDeclaration_2() { return cUpdateEnumLiteralDeclaration_2; }
		
		public Keyword getUpdateUpdateKeyword_2_0() { return cUpdateUpdateKeyword_2_0; }
		
		//Display
		public EnumLiteralDeclaration getDisplayEnumLiteralDeclaration_3() { return cDisplayEnumLiteralDeclaration_3; }
		
		public Keyword getDisplayDisplayKeyword_3_0() { return cDisplayDisplayKeyword_3_0; }
	}
	public class KeyTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.featurelanguage.FeatureLanguage.KeyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUniqueEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUniqueUniqueKeyword_0_0 = (Keyword)cUniqueEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAutouniqueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAutouniqueAutouniqueKeyword_1_0 = (Keyword)cAutouniqueEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIndexEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIndexIndexKeyword_2_0 = (Keyword)cIndexEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum KeyType:
		//    unique | autounique | index;
		public EnumRule getRule() { return rule; }
		
		//unique | autounique | index
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//unique
		public EnumLiteralDeclaration getUniqueEnumLiteralDeclaration_0() { return cUniqueEnumLiteralDeclaration_0; }
		
		public Keyword getUniqueUniqueKeyword_0_0() { return cUniqueUniqueKeyword_0_0; }
		
		//autounique
		public EnumLiteralDeclaration getAutouniqueEnumLiteralDeclaration_1() { return cAutouniqueEnumLiteralDeclaration_1; }
		
		public Keyword getAutouniqueAutouniqueKeyword_1_0() { return cAutouniqueAutouniqueKeyword_1_0; }
		
		//index
		public EnumLiteralDeclaration getIndexEnumLiteralDeclaration_2() { return cIndexEnumLiteralDeclaration_2; }
		
		public Keyword getIndexIndexKeyword_2_0() { return cIndexIndexKeyword_2_0; }
	}
	public class ComparisonOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.featurelanguage.FeatureLanguage.ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGreaterThanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanGreaterThanSignKeyword_0_0 = (Keyword)cGreaterThanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThanOrEqualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanOrEqualGreaterThanSignEqualsSignKeyword_1_0 = (Keyword)cGreaterThanOrEqualEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEqualEqualsSignKeyword_2_0 = (Keyword)cEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLessThanOrEqualEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLessThanOrEqualLessThanSignEqualsSignKeyword_3_0 = (Keyword)cLessThanOrEqualEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLessThanEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLessThanLessThanSignKeyword_4_0 = (Keyword)cLessThanEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ComparisonOperator:
		//    GreaterThan = '>' | GreaterThanOrEqual = '>=' | Equal = '=' | LessThanOrEqual = '<=' | LessThan = '<';
		public EnumRule getRule() { return rule; }
		
		//GreaterThan = '>' | GreaterThanOrEqual = '>=' | Equal = '=' | LessThanOrEqual = '<=' | LessThan = '<'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GreaterThan = '>'
		public EnumLiteralDeclaration getGreaterThanEnumLiteralDeclaration_0() { return cGreaterThanEnumLiteralDeclaration_0; }
		
		//'>'
		public Keyword getGreaterThanGreaterThanSignKeyword_0_0() { return cGreaterThanGreaterThanSignKeyword_0_0; }
		
		//GreaterThanOrEqual = '>='
		public EnumLiteralDeclaration getGreaterThanOrEqualEnumLiteralDeclaration_1() { return cGreaterThanOrEqualEnumLiteralDeclaration_1; }
		
		//'>='
		public Keyword getGreaterThanOrEqualGreaterThanSignEqualsSignKeyword_1_0() { return cGreaterThanOrEqualGreaterThanSignEqualsSignKeyword_1_0; }
		
		//Equal = '='
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_2() { return cEqualEnumLiteralDeclaration_2; }
		
		//'='
		public Keyword getEqualEqualsSignKeyword_2_0() { return cEqualEqualsSignKeyword_2_0; }
		
		//LessThanOrEqual = '<='
		public EnumLiteralDeclaration getLessThanOrEqualEnumLiteralDeclaration_3() { return cLessThanOrEqualEnumLiteralDeclaration_3; }
		
		//'<='
		public Keyword getLessThanOrEqualLessThanSignEqualsSignKeyword_3_0() { return cLessThanOrEqualLessThanSignEqualsSignKeyword_3_0; }
		
		//LessThan = '<'
		public EnumLiteralDeclaration getLessThanEnumLiteralDeclaration_4() { return cLessThanEnumLiteralDeclaration_4; }
		
		//'<'
		public Keyword getLessThanLessThanSignKeyword_4_0() { return cLessThanLessThanSignKeyword_4_0; }
	}
	
	private final FeatureLanguageElements pFeatureLanguage;
	private final NamedElementElements pNamedElement;
	private final ConceptElements pConcept;
	private final CharacteristicElements pCharacteristic;
	private final TypeElements pType;
	private final ConditionElements pCondition;
	private final ConstraintElements pConstraint;
	private final KeyElements pKey;
	private final ConceptPropertyElements pConceptProperty;
	private final CharacteristicPropertyElements pCharacteristicProperty;
	private final PropertyElements pProperty;
	private final FeatureElements pFeature;
	private final VerbElements eVerb;
	private final KeyTypeElements eKeyType;
	private final ComparisonOperatorElements eComparisonOperator;
	private final TerminalRule tMULTIPLICITY;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FeatureLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFeatureLanguage = new FeatureLanguageElements();
		this.pNamedElement = new NamedElementElements();
		this.pConcept = new ConceptElements();
		this.pCharacteristic = new CharacteristicElements();
		this.pType = new TypeElements();
		this.pCondition = new ConditionElements();
		this.pConstraint = new ConstraintElements();
		this.pKey = new KeyElements();
		this.pConceptProperty = new ConceptPropertyElements();
		this.pCharacteristicProperty = new CharacteristicPropertyElements();
		this.pProperty = new PropertyElements();
		this.pFeature = new FeatureElements();
		this.eVerb = new VerbElements();
		this.eKeyType = new KeyTypeElements();
		this.eComparisonOperator = new ComparisonOperatorElements();
		this.tMULTIPLICITY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "xtext.featurelanguage.FeatureLanguage.MULTIPLICITY");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtext.featurelanguage.FeatureLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FeatureLanguage:
	//        (concepts+=Concept)*
	//        'constraints' (constraints+=Constraint)*
	//        'keys' (keys+=Key)*
	//        'properties' (properties+=Property)*
	//        'features' (features+=Feature)*;
	public FeatureLanguageElements getFeatureLanguageAccess() {
		return pFeatureLanguage;
	}
	
	public ParserRule getFeatureLanguageRule() {
		return getFeatureLanguageAccess().getRule();
	}
	
	//NamedElement:
	//    Concept | Characteristic;
	public NamedElementElements getNamedElementAccess() {
		return pNamedElement;
	}
	
	public ParserRule getNamedElementRule() {
		return getNamedElementAccess().getRule();
	}
	
	//Concept:
	//        'concept' name=ID
	//        (characteristics+=Characteristic)*;
	public ConceptElements getConceptAccess() {
		return pConcept;
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}
	
	//Characteristic:
	//        /*(typeName=STRING)*/ (type=Type) name=ID ((multiplicity=MULTIPLICITY) | '{' (literals+=STRING)* '}')?;
	public CharacteristicElements getCharacteristicAccess() {
		return pCharacteristic;
	}
	
	public ParserRule getCharacteristicRule() {
		return getCharacteristicAccess().getRule();
	}
	
	//Type:
	//    name=ID;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Condition:
	//        operator=(ComparisonOperator) (value=INT);
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Constraint:
	//    (concept=[Concept])('.'(characteristic=[Characteristic])) (condition=Condition) (errorMsg=STRING);
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//Key:
	//    (concept=[Concept])('.'(characteristic=[Characteristic])) (keyType=KeyType);
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}
	
	// //possibly add a 'unique (Concept)' to signify uniqueness in that concept only
	//ConceptProperty:
	//    (concept=[Concept]) isRoot?='root';
	public ConceptPropertyElements getConceptPropertyAccess() {
		return pConceptProperty;
	}
	
	public ParserRule getConceptPropertyRule() {
		return getConceptPropertyAccess().getRule();
	}
	
	//CharacteristicProperty:
	//    (concept=[Concept])('.'(characteristic=[Characteristic])) isLazy?='lazy';
	public CharacteristicPropertyElements getCharacteristicPropertyAccess() {
		return pCharacteristicProperty;
	}
	
	public ParserRule getCharacteristicPropertyRule() {
		return getCharacteristicPropertyAccess().getRule();
	}
	
	//Property:
	//    ConceptProperty | CharacteristicProperty;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//Feature:
	//        (verb=Verb) (concept=[Concept])('.'(characteristic=[Characteristic]))?;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//enum Verb:
	//        Add | Remove | Update | Display;
	public VerbElements getVerbAccess() {
		return eVerb;
	}
	
	public EnumRule getVerbRule() {
		return getVerbAccess().getRule();
	}
	
	//enum KeyType:
	//    unique | autounique | index;
	public KeyTypeElements getKeyTypeAccess() {
		return eKeyType;
	}
	
	public EnumRule getKeyTypeRule() {
		return getKeyTypeAccess().getRule();
	}
	
	//enum ComparisonOperator:
	//    GreaterThan = '>' | GreaterThanOrEqual = '>=' | Equal = '=' | LessThanOrEqual = '<=' | LessThan = '<';
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return eComparisonOperator;
	}
	
	public EnumRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}
	
	//terminal MULTIPLICITY:
	//    (INT | '*')'..'(INT | '*');
	public TerminalRule getMULTIPLICITYRule() {
		return tMULTIPLICITY;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
