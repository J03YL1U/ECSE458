/*
 * generated by Xtext 2.32.0
 */
grammar InternalFeatureLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package xtext.featurelanguage.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package xtext.featurelanguage.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import xtext.featurelanguage.services.FeatureLanguageGrammarAccess;

}

@parser::members {

 	private FeatureLanguageGrammarAccess grammarAccess;

    public InternalFeatureLanguageParser(TokenStream input, FeatureLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "FeatureList";
   	}

   	@Override
   	protected FeatureLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFeatureList
entryRuleFeatureList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureListRule()); }
	iv_ruleFeatureList=ruleFeatureList
	{ $current=$iv_ruleFeatureList.current; }
	EOF;

// Rule FeatureList
ruleFeatureList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureListAccess().getConceptsConceptParserRuleCall_0_0());
				}
				lv_concepts_0_0=ruleConcept
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureListRule());
					}
					add(
						$current,
						"concepts",
						lv_concepts_0_0,
						"xtext.featurelanguage.FeatureLanguage.Concept");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_1='constraints'
		{
			newLeafNode(otherlv_1, grammarAccess.getFeatureListAccess().getConstraintsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureListAccess().getConstraintsConstraintParserRuleCall_2_0());
				}
				lv_constraints_2_0=ruleConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureListRule());
					}
					add(
						$current,
						"constraints",
						lv_constraints_2_0,
						"xtext.featurelanguage.FeatureLanguage.Constraint");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='keys'
		{
			newLeafNode(otherlv_3, grammarAccess.getFeatureListAccess().getKeysKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureListAccess().getKeysKeyParserRuleCall_4_0());
				}
				lv_keys_4_0=ruleKey
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureListRule());
					}
					add(
						$current,
						"keys",
						lv_keys_4_0,
						"xtext.featurelanguage.FeatureLanguage.Key");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='properties'
		{
			newLeafNode(otherlv_5, grammarAccess.getFeatureListAccess().getPropertiesKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureListAccess().getPropertiesPropertyParserRuleCall_6_0());
				}
				lv_properties_6_0=ruleProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureListRule());
					}
					add(
						$current,
						"properties",
						lv_properties_6_0,
						"xtext.featurelanguage.FeatureLanguage.Property");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='features'
		{
			newLeafNode(otherlv_7, grammarAccess.getFeatureListAccess().getFeaturesKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureListAccess().getFeaturesFeatureParserRuleCall_8_0());
				}
				lv_features_8_0=ruleFeature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureListRule());
					}
					add(
						$current,
						"features",
						lv_features_8_0,
						"xtext.featurelanguage.FeatureLanguage.Feature");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleConcept
entryRuleConcept returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConceptRule()); }
	iv_ruleConcept=ruleConcept
	{ $current=$iv_ruleConcept.current; }
	EOF;

// Rule Concept
ruleConcept returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='concept'
		{
			newLeafNode(otherlv_0, grammarAccess.getConceptAccess().getConceptKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getConceptAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConceptRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConceptAccess().getCharacteristicsCharacteristicParserRuleCall_2_0());
				}
				lv_characteristics_2_0=ruleCharacteristic
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConceptRule());
					}
					add(
						$current,
						"characteristics",
						lv_characteristics_2_0,
						"xtext.featurelanguage.FeatureLanguage.Characteristic");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleCharacteristic
entryRuleCharacteristic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharacteristicRule()); }
	iv_ruleCharacteristic=ruleCharacteristic
	{ $current=$iv_ruleCharacteristic.current; }
	EOF;

// Rule Characteristic
ruleCharacteristic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCharacteristicAccess().getTypeTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCharacteristicRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"xtext.featurelanguage.FeatureLanguage.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCharacteristicAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCharacteristicRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_multiplicity_2_0=RULE_MULTIPLICITY
				{
					newLeafNode(lv_multiplicity_2_0, grammarAccess.getCharacteristicAccess().getMultiplicityMULTIPLICITYTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCharacteristicRule());
					}
					setWithLastConsumed(
						$current,
						"multiplicity",
						lv_multiplicity_2_0,
						"xtext.featurelanguage.FeatureLanguage.MULTIPLICITY");
				}
			)
		)?
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTypeRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='>'
			{
				newLeafNode(otherlv_0, grammarAccess.getConditionAccess().getGreaterThanSignKeyword_0_0());
			}
			    |
			otherlv_1='>='
			{
				newLeafNode(otherlv_1, grammarAccess.getConditionAccess().getGreaterThanSignEqualsSignKeyword_0_1());
			}
			    |
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getConditionAccess().getEqualsSignKeyword_0_2());
			}
			    |
			otherlv_3='<='
			{
				newLeafNode(otherlv_3, grammarAccess.getConditionAccess().getLessThanSignEqualsSignKeyword_0_3());
			}
			    |
			otherlv_4='<'
			{
				newLeafNode(otherlv_4, grammarAccess.getConditionAccess().getLessThanSignKeyword_0_4());
			}
		)
		(
			(
				lv_value_5_0=RULE_INT
				{
					newLeafNode(lv_value_5_0, grammarAccess.getConditionAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleErrorMsg
entryRuleErrorMsg returns [String current=null]:
	{ newCompositeNode(grammarAccess.getErrorMsgRule()); }
	iv_ruleErrorMsg=ruleErrorMsg
	{ $current=$iv_ruleErrorMsg.current.getText(); }
	EOF;

// Rule ErrorMsg
ruleErrorMsg returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getErrorMsgAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	iv_ruleConstraint=ruleConstraint
	{ $current=$iv_ruleConstraint.current; }
	EOF;

// Rule Constraint
ruleConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstraintRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getConstraintAccess().getConceptConceptCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getConstraintAccess().getFullStopKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstraintRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getConstraintAccess().getCharacteristicCharacteristicCrossReference_1_1_0());
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintAccess().getConditionConditionParserRuleCall_2_0());
				}
				lv_condition_3_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintRule());
					}
					add(
						$current,
						"condition",
						lv_condition_3_0,
						"xtext.featurelanguage.FeatureLanguage.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintAccess().getErrormsgErrorMsgParserRuleCall_3_0());
				}
				lv_errormsg_4_0=ruleErrorMsg
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintRule());
					}
					add(
						$current,
						"errormsg",
						lv_errormsg_4_0,
						"xtext.featurelanguage.FeatureLanguage.ErrorMsg");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleKey
entryRuleKey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyRule()); }
	iv_ruleKey=ruleKey
	{ $current=$iv_ruleKey.current; }
	EOF;

// Rule Key
ruleKey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getKeyRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getKeyAccess().getConceptConceptCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getKeyAccess().getFullStopKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getKeyRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getKeyAccess().getCharacteristicCharacteristicCrossReference_1_1_0());
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getKeyAccess().getKeyTypeKeyTypeEnumRuleCall_2_0());
				}
				lv_keyType_3_0=ruleKeyType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKeyRule());
					}
					set(
						$current,
						"keyType",
						lv_keyType_3_0,
						"xtext.featurelanguage.FeatureLanguage.KeyType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConceptProperty
entryRuleConceptProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConceptPropertyRule()); }
	iv_ruleConceptProperty=ruleConceptProperty
	{ $current=$iv_ruleConceptProperty.current; }
	EOF;

// Rule ConceptProperty
ruleConceptProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConceptPropertyRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getConceptPropertyAccess().getConceptConceptCrossReference_0_0());
				}
			)
		)
		otherlv_1='root'
		{
			newLeafNode(otherlv_1, grammarAccess.getConceptPropertyAccess().getRootKeyword_1());
		}
	)
;

// Entry rule entryRuleCharacteristicProperty
entryRuleCharacteristicProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharacteristicPropertyRule()); }
	iv_ruleCharacteristicProperty=ruleCharacteristicProperty
	{ $current=$iv_ruleCharacteristicProperty.current; }
	EOF;

// Rule CharacteristicProperty
ruleCharacteristicProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCharacteristicPropertyRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getCharacteristicPropertyAccess().getConceptConceptCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getCharacteristicPropertyAccess().getFullStopKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCharacteristicPropertyRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getCharacteristicPropertyAccess().getCharacteristicCharacteristicCrossReference_1_1_0());
					}
				)
			)
		)
		otherlv_3='lazy'
		{
			newLeafNode(otherlv_3, grammarAccess.getCharacteristicPropertyAccess().getLazyKeyword_2());
		}
	)
;

// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	iv_ruleProperty=ruleProperty
	{ $current=$iv_ruleProperty.current; }
	EOF;

// Rule Property
ruleProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPropertyAccess().getConceptPropertyParserRuleCall_0());
		}
		this_ConceptProperty_0=ruleConceptProperty
		{
			$current = $this_ConceptProperty_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPropertyAccess().getCharacteristicPropertyParserRuleCall_1());
		}
		this_CharacteristicProperty_1=ruleCharacteristicProperty
		{
			$current = $this_CharacteristicProperty_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	iv_ruleFeature=ruleFeature
	{ $current=$iv_ruleFeature.current; }
	EOF;

// Rule Feature
ruleFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureAccess().getVerbVerbEnumRuleCall_0_0());
				}
				lv_verb_0_0=ruleVerb
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureRule());
					}
					set(
						$current,
						"verb",
						lv_verb_0_0,
						"xtext.featurelanguage.FeatureLanguage.Verb");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFeatureRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getFeatureAccess().getConceptConceptCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getFeatureAccess().getFullStopKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFeatureRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getFeatureAccess().getCharacteristicCharacteristicCrossReference_2_1_0());
					}
				)
			)
		)?
	)
;

// Rule Verb
ruleVerb returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Add'
			{
				$current = grammarAccess.getVerbAccess().getAddEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getVerbAccess().getAddEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Remove'
			{
				$current = grammarAccess.getVerbAccess().getRemoveEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getVerbAccess().getRemoveEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Update'
			{
				$current = grammarAccess.getVerbAccess().getUpdateEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getVerbAccess().getUpdateEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Display'
			{
				$current = grammarAccess.getVerbAccess().getDisplayEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getVerbAccess().getDisplayEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule KeyType
ruleKeyType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='unique'
			{
				$current = grammarAccess.getKeyTypeAccess().getUniqueEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getKeyTypeAccess().getUniqueEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='autounique'
			{
				$current = grammarAccess.getKeyTypeAccess().getAutouniqueEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getKeyTypeAccess().getAutouniqueEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='index'
			{
				$current = grammarAccess.getKeyTypeAccess().getIndexEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getKeyTypeAccess().getIndexEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_MULTIPLICITY : (RULE_INT|'*') '..' (RULE_INT|'*');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
