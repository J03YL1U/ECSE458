/**
 * generated by Xtext 2.32.0
 */
package xtext.featurelanguage.featureLanguage.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import xtext.featurelanguage.featureLanguage.Concept;
import xtext.featurelanguage.featureLanguage.Constraint;
import xtext.featurelanguage.featureLanguage.Feature;
import xtext.featurelanguage.featureLanguage.FeatureLanguage;
import xtext.featurelanguage.featureLanguage.FeatureLanguagePackage;
import xtext.featurelanguage.featureLanguage.Key;
import xtext.featurelanguage.featureLanguage.Property;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Feature Language</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.featurelanguage.featureLanguage.impl.FeatureLanguageImpl#getConcepts <em>Concepts</em>}</li>
 *   <li>{@link xtext.featurelanguage.featureLanguage.impl.FeatureLanguageImpl#getConstraints <em>Constraints</em>}</li>
 *   <li>{@link xtext.featurelanguage.featureLanguage.impl.FeatureLanguageImpl#getKeys <em>Keys</em>}</li>
 *   <li>{@link xtext.featurelanguage.featureLanguage.impl.FeatureLanguageImpl#getProperties <em>Properties</em>}</li>
 *   <li>{@link xtext.featurelanguage.featureLanguage.impl.FeatureLanguageImpl#getFeatures <em>Features</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FeatureLanguageImpl extends MinimalEObjectImpl.Container implements FeatureLanguage
{
  /**
   * The cached value of the '{@link #getConcepts() <em>Concepts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcepts()
   * @generated
   * @ordered
   */
  protected EList<Concept> concepts;

  /**
   * The cached value of the '{@link #getConstraints() <em>Constraints</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraints()
   * @generated
   * @ordered
   */
  protected EList<Constraint> constraints;

  /**
   * The cached value of the '{@link #getKeys() <em>Keys</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeys()
   * @generated
   * @ordered
   */
  protected EList<Key> keys;

  /**
   * The cached value of the '{@link #getProperties() <em>Properties</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperties()
   * @generated
   * @ordered
   */
  protected EList<Property> properties;

  /**
   * The cached value of the '{@link #getFeatures() <em>Features</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFeatures()
   * @generated
   * @ordered
   */
  protected EList<Feature> features;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FeatureLanguageImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FeatureLanguagePackage.Literals.FEATURE_LANGUAGE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Concept> getConcepts()
  {
    if (concepts == null)
    {
      concepts = new EObjectContainmentEList<Concept>(Concept.class, this, FeatureLanguagePackage.FEATURE_LANGUAGE__CONCEPTS);
    }
    return concepts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Constraint> getConstraints()
  {
    if (constraints == null)
    {
      constraints = new EObjectContainmentEList<Constraint>(Constraint.class, this, FeatureLanguagePackage.FEATURE_LANGUAGE__CONSTRAINTS);
    }
    return constraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Key> getKeys()
  {
    if (keys == null)
    {
      keys = new EObjectContainmentEList<Key>(Key.class, this, FeatureLanguagePackage.FEATURE_LANGUAGE__KEYS);
    }
    return keys;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Property> getProperties()
  {
    if (properties == null)
    {
      properties = new EObjectContainmentEList<Property>(Property.class, this, FeatureLanguagePackage.FEATURE_LANGUAGE__PROPERTIES);
    }
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Feature> getFeatures()
  {
    if (features == null)
    {
      features = new EObjectContainmentEList<Feature>(Feature.class, this, FeatureLanguagePackage.FEATURE_LANGUAGE__FEATURES);
    }
    return features;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FeatureLanguagePackage.FEATURE_LANGUAGE__CONCEPTS:
        return ((InternalEList<?>)getConcepts()).basicRemove(otherEnd, msgs);
      case FeatureLanguagePackage.FEATURE_LANGUAGE__CONSTRAINTS:
        return ((InternalEList<?>)getConstraints()).basicRemove(otherEnd, msgs);
      case FeatureLanguagePackage.FEATURE_LANGUAGE__KEYS:
        return ((InternalEList<?>)getKeys()).basicRemove(otherEnd, msgs);
      case FeatureLanguagePackage.FEATURE_LANGUAGE__PROPERTIES:
        return ((InternalEList<?>)getProperties()).basicRemove(otherEnd, msgs);
      case FeatureLanguagePackage.FEATURE_LANGUAGE__FEATURES:
        return ((InternalEList<?>)getFeatures()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FeatureLanguagePackage.FEATURE_LANGUAGE__CONCEPTS:
        return getConcepts();
      case FeatureLanguagePackage.FEATURE_LANGUAGE__CONSTRAINTS:
        return getConstraints();
      case FeatureLanguagePackage.FEATURE_LANGUAGE__KEYS:
        return getKeys();
      case FeatureLanguagePackage.FEATURE_LANGUAGE__PROPERTIES:
        return getProperties();
      case FeatureLanguagePackage.FEATURE_LANGUAGE__FEATURES:
        return getFeatures();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FeatureLanguagePackage.FEATURE_LANGUAGE__CONCEPTS:
        getConcepts().clear();
        getConcepts().addAll((Collection<? extends Concept>)newValue);
        return;
      case FeatureLanguagePackage.FEATURE_LANGUAGE__CONSTRAINTS:
        getConstraints().clear();
        getConstraints().addAll((Collection<? extends Constraint>)newValue);
        return;
      case FeatureLanguagePackage.FEATURE_LANGUAGE__KEYS:
        getKeys().clear();
        getKeys().addAll((Collection<? extends Key>)newValue);
        return;
      case FeatureLanguagePackage.FEATURE_LANGUAGE__PROPERTIES:
        getProperties().clear();
        getProperties().addAll((Collection<? extends Property>)newValue);
        return;
      case FeatureLanguagePackage.FEATURE_LANGUAGE__FEATURES:
        getFeatures().clear();
        getFeatures().addAll((Collection<? extends Feature>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FeatureLanguagePackage.FEATURE_LANGUAGE__CONCEPTS:
        getConcepts().clear();
        return;
      case FeatureLanguagePackage.FEATURE_LANGUAGE__CONSTRAINTS:
        getConstraints().clear();
        return;
      case FeatureLanguagePackage.FEATURE_LANGUAGE__KEYS:
        getKeys().clear();
        return;
      case FeatureLanguagePackage.FEATURE_LANGUAGE__PROPERTIES:
        getProperties().clear();
        return;
      case FeatureLanguagePackage.FEATURE_LANGUAGE__FEATURES:
        getFeatures().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FeatureLanguagePackage.FEATURE_LANGUAGE__CONCEPTS:
        return concepts != null && !concepts.isEmpty();
      case FeatureLanguagePackage.FEATURE_LANGUAGE__CONSTRAINTS:
        return constraints != null && !constraints.isEmpty();
      case FeatureLanguagePackage.FEATURE_LANGUAGE__KEYS:
        return keys != null && !keys.isEmpty();
      case FeatureLanguagePackage.FEATURE_LANGUAGE__PROPERTIES:
        return properties != null && !properties.isEmpty();
      case FeatureLanguagePackage.FEATURE_LANGUAGE__FEATURES:
        return features != null && !features.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //FeatureLanguageImpl
