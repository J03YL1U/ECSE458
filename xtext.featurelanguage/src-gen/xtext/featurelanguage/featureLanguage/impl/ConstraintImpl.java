/**
 * generated by Xtext 2.32.0
 */
package xtext.featurelanguage.featureLanguage.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import xtext.featurelanguage.featureLanguage.Characteristic;
import xtext.featurelanguage.featureLanguage.Concept;
import xtext.featurelanguage.featureLanguage.Condition;
import xtext.featurelanguage.featureLanguage.Constraint;
import xtext.featurelanguage.featureLanguage.FeatureLanguagePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Constraint</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.featurelanguage.featureLanguage.impl.ConstraintImpl#getConcept <em>Concept</em>}</li>
 *   <li>{@link xtext.featurelanguage.featureLanguage.impl.ConstraintImpl#getCharacteristic <em>Characteristic</em>}</li>
 *   <li>{@link xtext.featurelanguage.featureLanguage.impl.ConstraintImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link xtext.featurelanguage.featureLanguage.impl.ConstraintImpl#getErrorMsg <em>Error Msg</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConstraintImpl extends MinimalEObjectImpl.Container implements Constraint
{
  /**
   * The cached value of the '{@link #getConcept() <em>Concept</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcept()
   * @generated
   * @ordered
   */
  protected Concept concept;

  /**
   * The cached value of the '{@link #getCharacteristic() <em>Characteristic</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCharacteristic()
   * @generated
   * @ordered
   */
  protected Characteristic characteristic;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Condition condition;

  /**
   * The default value of the '{@link #getErrorMsg() <em>Error Msg</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getErrorMsg()
   * @generated
   * @ordered
   */
  protected static final String ERROR_MSG_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getErrorMsg() <em>Error Msg</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getErrorMsg()
   * @generated
   * @ordered
   */
  protected String errorMsg = ERROR_MSG_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConstraintImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FeatureLanguagePackage.Literals.CONSTRAINT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Concept getConcept()
  {
    if (concept != null && concept.eIsProxy())
    {
      InternalEObject oldConcept = (InternalEObject)concept;
      concept = (Concept)eResolveProxy(oldConcept);
      if (concept != oldConcept)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FeatureLanguagePackage.CONSTRAINT__CONCEPT, oldConcept, concept));
      }
    }
    return concept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Concept basicGetConcept()
  {
    return concept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConcept(Concept newConcept)
  {
    Concept oldConcept = concept;
    concept = newConcept;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FeatureLanguagePackage.CONSTRAINT__CONCEPT, oldConcept, concept));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Characteristic getCharacteristic()
  {
    if (characteristic != null && characteristic.eIsProxy())
    {
      InternalEObject oldCharacteristic = (InternalEObject)characteristic;
      characteristic = (Characteristic)eResolveProxy(oldCharacteristic);
      if (characteristic != oldCharacteristic)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FeatureLanguagePackage.CONSTRAINT__CHARACTERISTIC, oldCharacteristic, characteristic));
      }
    }
    return characteristic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Characteristic basicGetCharacteristic()
  {
    return characteristic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCharacteristic(Characteristic newCharacteristic)
  {
    Characteristic oldCharacteristic = characteristic;
    characteristic = newCharacteristic;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FeatureLanguagePackage.CONSTRAINT__CHARACTERISTIC, oldCharacteristic, characteristic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Condition newCondition, NotificationChain msgs)
  {
    Condition oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FeatureLanguagePackage.CONSTRAINT__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCondition(Condition newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FeatureLanguagePackage.CONSTRAINT__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FeatureLanguagePackage.CONSTRAINT__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FeatureLanguagePackage.CONSTRAINT__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getErrorMsg()
  {
    return errorMsg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setErrorMsg(String newErrorMsg)
  {
    String oldErrorMsg = errorMsg;
    errorMsg = newErrorMsg;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FeatureLanguagePackage.CONSTRAINT__ERROR_MSG, oldErrorMsg, errorMsg));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FeatureLanguagePackage.CONSTRAINT__CONDITION:
        return basicSetCondition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FeatureLanguagePackage.CONSTRAINT__CONCEPT:
        if (resolve) return getConcept();
        return basicGetConcept();
      case FeatureLanguagePackage.CONSTRAINT__CHARACTERISTIC:
        if (resolve) return getCharacteristic();
        return basicGetCharacteristic();
      case FeatureLanguagePackage.CONSTRAINT__CONDITION:
        return getCondition();
      case FeatureLanguagePackage.CONSTRAINT__ERROR_MSG:
        return getErrorMsg();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FeatureLanguagePackage.CONSTRAINT__CONCEPT:
        setConcept((Concept)newValue);
        return;
      case FeatureLanguagePackage.CONSTRAINT__CHARACTERISTIC:
        setCharacteristic((Characteristic)newValue);
        return;
      case FeatureLanguagePackage.CONSTRAINT__CONDITION:
        setCondition((Condition)newValue);
        return;
      case FeatureLanguagePackage.CONSTRAINT__ERROR_MSG:
        setErrorMsg((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FeatureLanguagePackage.CONSTRAINT__CONCEPT:
        setConcept((Concept)null);
        return;
      case FeatureLanguagePackage.CONSTRAINT__CHARACTERISTIC:
        setCharacteristic((Characteristic)null);
        return;
      case FeatureLanguagePackage.CONSTRAINT__CONDITION:
        setCondition((Condition)null);
        return;
      case FeatureLanguagePackage.CONSTRAINT__ERROR_MSG:
        setErrorMsg(ERROR_MSG_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FeatureLanguagePackage.CONSTRAINT__CONCEPT:
        return concept != null;
      case FeatureLanguagePackage.CONSTRAINT__CHARACTERISTIC:
        return characteristic != null;
      case FeatureLanguagePackage.CONSTRAINT__CONDITION:
        return condition != null;
      case FeatureLanguagePackage.CONSTRAINT__ERROR_MSG:
        return ERROR_MSG_EDEFAULT == null ? errorMsg != null : !ERROR_MSG_EDEFAULT.equals(errorMsg);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (errorMsg: ");
    result.append(errorMsg);
    result.append(')');
    return result.toString();
  }

} //ConstraintImpl
