/**
 * generated by Xtext 2.32.0
 */
package xtext.featurelanguage.featureLanguage.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import xtext.featurelanguage.featureLanguage.Characteristic;
import xtext.featurelanguage.featureLanguage.Concept;
import xtext.featurelanguage.featureLanguage.FeatureLanguagePackage;
import xtext.featurelanguage.featureLanguage.Key;
import xtext.featurelanguage.featureLanguage.KeyType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Key</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link xtext.featurelanguage.featureLanguage.impl.KeyImpl#getConcept <em>Concept</em>}</li>
 *   <li>{@link xtext.featurelanguage.featureLanguage.impl.KeyImpl#getCharacteristic <em>Characteristic</em>}</li>
 *   <li>{@link xtext.featurelanguage.featureLanguage.impl.KeyImpl#getKeyType <em>Key Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class KeyImpl extends MinimalEObjectImpl.Container implements Key
{
  /**
   * The cached value of the '{@link #getConcept() <em>Concept</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcept()
   * @generated
   * @ordered
   */
  protected Concept concept;

  /**
   * The cached value of the '{@link #getCharacteristic() <em>Characteristic</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCharacteristic()
   * @generated
   * @ordered
   */
  protected Characteristic characteristic;

  /**
   * The default value of the '{@link #getKeyType() <em>Key Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyType()
   * @generated
   * @ordered
   */
  protected static final KeyType KEY_TYPE_EDEFAULT = KeyType.UNIQUE;

  /**
   * The cached value of the '{@link #getKeyType() <em>Key Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyType()
   * @generated
   * @ordered
   */
  protected KeyType keyType = KEY_TYPE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected KeyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FeatureLanguagePackage.Literals.KEY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Concept getConcept()
  {
    if (concept != null && concept.eIsProxy())
    {
      InternalEObject oldConcept = (InternalEObject)concept;
      concept = (Concept)eResolveProxy(oldConcept);
      if (concept != oldConcept)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FeatureLanguagePackage.KEY__CONCEPT, oldConcept, concept));
      }
    }
    return concept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Concept basicGetConcept()
  {
    return concept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConcept(Concept newConcept)
  {
    Concept oldConcept = concept;
    concept = newConcept;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FeatureLanguagePackage.KEY__CONCEPT, oldConcept, concept));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Characteristic getCharacteristic()
  {
    if (characteristic != null && characteristic.eIsProxy())
    {
      InternalEObject oldCharacteristic = (InternalEObject)characteristic;
      characteristic = (Characteristic)eResolveProxy(oldCharacteristic);
      if (characteristic != oldCharacteristic)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, FeatureLanguagePackage.KEY__CHARACTERISTIC, oldCharacteristic, characteristic));
      }
    }
    return characteristic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Characteristic basicGetCharacteristic()
  {
    return characteristic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCharacteristic(Characteristic newCharacteristic)
  {
    Characteristic oldCharacteristic = characteristic;
    characteristic = newCharacteristic;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FeatureLanguagePackage.KEY__CHARACTERISTIC, oldCharacteristic, characteristic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KeyType getKeyType()
  {
    return keyType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setKeyType(KeyType newKeyType)
  {
    KeyType oldKeyType = keyType;
    keyType = newKeyType == null ? KEY_TYPE_EDEFAULT : newKeyType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FeatureLanguagePackage.KEY__KEY_TYPE, oldKeyType, keyType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FeatureLanguagePackage.KEY__CONCEPT:
        if (resolve) return getConcept();
        return basicGetConcept();
      case FeatureLanguagePackage.KEY__CHARACTERISTIC:
        if (resolve) return getCharacteristic();
        return basicGetCharacteristic();
      case FeatureLanguagePackage.KEY__KEY_TYPE:
        return getKeyType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FeatureLanguagePackage.KEY__CONCEPT:
        setConcept((Concept)newValue);
        return;
      case FeatureLanguagePackage.KEY__CHARACTERISTIC:
        setCharacteristic((Characteristic)newValue);
        return;
      case FeatureLanguagePackage.KEY__KEY_TYPE:
        setKeyType((KeyType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FeatureLanguagePackage.KEY__CONCEPT:
        setConcept((Concept)null);
        return;
      case FeatureLanguagePackage.KEY__CHARACTERISTIC:
        setCharacteristic((Characteristic)null);
        return;
      case FeatureLanguagePackage.KEY__KEY_TYPE:
        setKeyType(KEY_TYPE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FeatureLanguagePackage.KEY__CONCEPT:
        return concept != null;
      case FeatureLanguagePackage.KEY__CHARACTERISTIC:
        return characteristic != null;
      case FeatureLanguagePackage.KEY__KEY_TYPE:
        return keyType != KEY_TYPE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (keyType: ");
    result.append(keyType);
    result.append(')');
    return result.toString();
  }

} //KeyImpl
