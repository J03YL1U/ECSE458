/*
 * generated by Xtext 2.32.0
 */
package xtext.featurelanguage.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import xtext.featurelanguage.featureLanguage.Characteristic;
import xtext.featurelanguage.featureLanguage.CharacteristicProperty;
import xtext.featurelanguage.featureLanguage.Concept;
import xtext.featurelanguage.featureLanguage.ConceptProperty;
import xtext.featurelanguage.featureLanguage.Condition;
import xtext.featurelanguage.featureLanguage.Constraint;
import xtext.featurelanguage.featureLanguage.Feature;
import xtext.featurelanguage.featureLanguage.FeatureLanguage;
import xtext.featurelanguage.featureLanguage.FeatureLanguagePackage;
import xtext.featurelanguage.featureLanguage.Key;
import xtext.featurelanguage.featureLanguage.Type;
import xtext.featurelanguage.services.FeatureLanguageGrammarAccess;

@SuppressWarnings("all")
public class FeatureLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FeatureLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FeatureLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FeatureLanguagePackage.CHARACTERISTIC:
				sequence_Characteristic(context, (Characteristic) semanticObject); 
				return; 
			case FeatureLanguagePackage.CHARACTERISTIC_PROPERTY:
				sequence_CharacteristicProperty(context, (CharacteristicProperty) semanticObject); 
				return; 
			case FeatureLanguagePackage.CONCEPT:
				sequence_Concept(context, (Concept) semanticObject); 
				return; 
			case FeatureLanguagePackage.CONCEPT_PROPERTY:
				sequence_ConceptProperty(context, (ConceptProperty) semanticObject); 
				return; 
			case FeatureLanguagePackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case FeatureLanguagePackage.CONSTRAINT:
				sequence_Constraint(context, (Constraint) semanticObject); 
				return; 
			case FeatureLanguagePackage.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case FeatureLanguagePackage.FEATURE_LANGUAGE:
				sequence_FeatureLanguage(context, (FeatureLanguage) semanticObject); 
				return; 
			case FeatureLanguagePackage.KEY:
				sequence_Key(context, (Key) semanticObject); 
				return; 
			case FeatureLanguagePackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     CharacteristicProperty returns CharacteristicProperty
	 *     Property returns CharacteristicProperty
	 *
	 * Constraint:
	 *     (concept=[Concept|ID] characteristic=[Characteristic|ID] isLazy?='lazy')
	 * </pre>
	 */
	protected void sequence_CharacteristicProperty(ISerializationContext context, CharacteristicProperty semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FeatureLanguagePackage.Literals.PROPERTY__CONCEPT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLanguagePackage.Literals.PROPERTY__CONCEPT));
			if (transientValues.isValueTransient(semanticObject, FeatureLanguagePackage.Literals.CHARACTERISTIC_PROPERTY__CHARACTERISTIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLanguagePackage.Literals.CHARACTERISTIC_PROPERTY__CHARACTERISTIC));
			if (transientValues.isValueTransient(semanticObject, FeatureLanguagePackage.Literals.CHARACTERISTIC_PROPERTY__IS_LAZY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLanguagePackage.Literals.CHARACTERISTIC_PROPERTY__IS_LAZY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCharacteristicPropertyAccess().getConceptConceptIDTerminalRuleCall_0_0_1(), semanticObject.eGet(FeatureLanguagePackage.Literals.PROPERTY__CONCEPT, false));
		feeder.accept(grammarAccess.getCharacteristicPropertyAccess().getCharacteristicCharacteristicIDTerminalRuleCall_1_1_0_1(), semanticObject.eGet(FeatureLanguagePackage.Literals.CHARACTERISTIC_PROPERTY__CHARACTERISTIC, false));
		feeder.accept(grammarAccess.getCharacteristicPropertyAccess().getIsLazyLazyKeyword_2_0(), semanticObject.isIsLazy());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NamedElement returns Characteristic
	 *     Characteristic returns Characteristic
	 *
	 * Constraint:
	 *     (type=Type name=ID (multiplicity=MULTIPLICITY | literals+=STRING+)?)
	 * </pre>
	 */
	protected void sequence_Characteristic(ISerializationContext context, Characteristic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ConceptProperty returns ConceptProperty
	 *     Property returns ConceptProperty
	 *
	 * Constraint:
	 *     (concept=[Concept|ID] isRoot?='root')
	 * </pre>
	 */
	protected void sequence_ConceptProperty(ISerializationContext context, ConceptProperty semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FeatureLanguagePackage.Literals.PROPERTY__CONCEPT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLanguagePackage.Literals.PROPERTY__CONCEPT));
			if (transientValues.isValueTransient(semanticObject, FeatureLanguagePackage.Literals.CONCEPT_PROPERTY__IS_ROOT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLanguagePackage.Literals.CONCEPT_PROPERTY__IS_ROOT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConceptPropertyAccess().getConceptConceptIDTerminalRuleCall_0_0_1(), semanticObject.eGet(FeatureLanguagePackage.Literals.PROPERTY__CONCEPT, false));
		feeder.accept(grammarAccess.getConceptPropertyAccess().getIsRootRootKeyword_1_0(), semanticObject.isIsRoot());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NamedElement returns Concept
	 *     Concept returns Concept
	 *
	 * Constraint:
	 *     (name=ID characteristics+=Characteristic*)
	 * </pre>
	 */
	protected void sequence_Concept(ISerializationContext context, Concept semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (operator=ComparisonOperator value=INT)
	 * </pre>
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FeatureLanguagePackage.Literals.CONDITION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLanguagePackage.Literals.CONDITION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, FeatureLanguagePackage.Literals.CONDITION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLanguagePackage.Literals.CONDITION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionAccess().getOperatorComparisonOperatorEnumRuleCall_0_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getConditionAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Constraint returns Constraint
	 *
	 * Constraint:
	 *     (concept=[Concept|ID] characteristic=[Characteristic|ID] condition=Condition errorMsg=STRING)
	 * </pre>
	 */
	protected void sequence_Constraint(ISerializationContext context, Constraint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FeatureLanguagePackage.Literals.CONSTRAINT__CONCEPT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLanguagePackage.Literals.CONSTRAINT__CONCEPT));
			if (transientValues.isValueTransient(semanticObject, FeatureLanguagePackage.Literals.CONSTRAINT__CHARACTERISTIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLanguagePackage.Literals.CONSTRAINT__CHARACTERISTIC));
			if (transientValues.isValueTransient(semanticObject, FeatureLanguagePackage.Literals.CONSTRAINT__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLanguagePackage.Literals.CONSTRAINT__CONDITION));
			if (transientValues.isValueTransient(semanticObject, FeatureLanguagePackage.Literals.CONSTRAINT__ERROR_MSG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLanguagePackage.Literals.CONSTRAINT__ERROR_MSG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstraintAccess().getConceptConceptIDTerminalRuleCall_0_0_1(), semanticObject.eGet(FeatureLanguagePackage.Literals.CONSTRAINT__CONCEPT, false));
		feeder.accept(grammarAccess.getConstraintAccess().getCharacteristicCharacteristicIDTerminalRuleCall_1_1_0_1(), semanticObject.eGet(FeatureLanguagePackage.Literals.CONSTRAINT__CHARACTERISTIC, false));
		feeder.accept(grammarAccess.getConstraintAccess().getConditionConditionParserRuleCall_2_0(), semanticObject.getCondition());
		feeder.accept(grammarAccess.getConstraintAccess().getErrorMsgSTRINGTerminalRuleCall_3_0(), semanticObject.getErrorMsg());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FeatureLanguage returns FeatureLanguage
	 *
	 * Constraint:
	 *     (concepts+=Concept* constraints+=Constraint* keys+=Key* properties+=Property* features+=Feature*)
	 * </pre>
	 */
	protected void sequence_FeatureLanguage(ISerializationContext context, FeatureLanguage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Feature returns Feature
	 *
	 * Constraint:
	 *     (verb=Verb concept=[Concept|ID] characteristic=[Characteristic|ID]?)
	 * </pre>
	 */
	protected void sequence_Feature(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Key returns Key
	 *
	 * Constraint:
	 *     (concept=[Concept|ID] characteristic=[Characteristic|ID] keyType=KeyType)
	 * </pre>
	 */
	protected void sequence_Key(ISerializationContext context, Key semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FeatureLanguagePackage.Literals.KEY__CONCEPT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLanguagePackage.Literals.KEY__CONCEPT));
			if (transientValues.isValueTransient(semanticObject, FeatureLanguagePackage.Literals.KEY__CHARACTERISTIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLanguagePackage.Literals.KEY__CHARACTERISTIC));
			if (transientValues.isValueTransient(semanticObject, FeatureLanguagePackage.Literals.KEY__KEY_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLanguagePackage.Literals.KEY__KEY_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyAccess().getConceptConceptIDTerminalRuleCall_0_0_1(), semanticObject.eGet(FeatureLanguagePackage.Literals.KEY__CONCEPT, false));
		feeder.accept(grammarAccess.getKeyAccess().getCharacteristicCharacteristicIDTerminalRuleCall_1_1_0_1(), semanticObject.eGet(FeatureLanguagePackage.Literals.KEY__CHARACTERISTIC, false));
		feeder.accept(grammarAccess.getKeyAccess().getKeyTypeKeyTypeEnumRuleCall_2_0(), semanticObject.getKeyType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FeatureLanguagePackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeatureLanguagePackage.Literals.TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
