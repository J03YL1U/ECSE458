/*
 * generated by Xtext 2.32.0
 */
package xtext.featurelanguage.scoping;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import xtext.featurelanguage.featureLanguage.CharacteristicProperty;
import xtext.featurelanguage.featureLanguage.Constraint;
import xtext.featurelanguage.featureLanguage.Feature;
import xtext.featurelanguage.featureLanguage.FeatureLanguagePackage;
import xtext.featurelanguage.featureLanguage.Key;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class FeatureLanguageScopeProvider extends AbstractFeatureLanguageScopeProvider {
	@Override
	public IScope getScope(EObject object, EReference ref) {
		if (ref == FeatureLanguagePackage.Literals.FEATURE__CHARACTERISTIC) {
			Feature feature = (Feature) object;
			return Scopes.scopeFor(feature.getConcept().getCharacteristics());
		}
		if (ref == FeatureLanguagePackage.Literals.CONSTRAINT__CHARACTERISTIC) {
			Constraint constraint = (Constraint) object;
			return Scopes.scopeFor(constraint.getConcept().getCharacteristics());
		}
		if (ref == FeatureLanguagePackage.Literals.KEY__CHARACTERISTIC) {
			Key key = (Key) object;
			return Scopes.scopeFor(key.getConcept().getCharacteristics());
		}
		if (ref == FeatureLanguagePackage.Literals.CHARACTERISTIC_PROPERTY__CHARACTERISTIC) {
			CharacteristicProperty property = (CharacteristicProperty) object;
			return Scopes.scopeFor(property.getConcept().getCharacteristics());
		}
		return super.getScope(object, ref);
	}

}
