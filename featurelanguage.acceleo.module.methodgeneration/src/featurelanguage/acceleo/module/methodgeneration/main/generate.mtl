[comment encoding = UTF-8 /]
[module generate('http://www.featurelanguage.xtext/FeatureLanguage')/]

[template public generate(aFeatureLanguage : FeatureLanguage)]
[comment @main/]
[file('myfeaturelist.txt', false, 'UTF-8')]
Method Generation
[for (aFeature : Feature | aFeatureLanguage.features)]
	[if (aFeature.verb.toString().equalsIgnoreCase('Add'))]
		[add(aFeature, aFeatureLanguage)/]
	[/if]
	[if (aFeature.verb.toString().equalsIgnoreCase('Remove'))]
		[remove(aFeature, aFeatureLanguage)/]
	[/if]
	[if (aFeature.verb.toString().equalsIgnoreCase('Update'))]
		[update(aFeature, aFeatureLanguage)/]
	[/if]
	[if (aFeature.verb.toString().equalsIgnoreCase('Display'))]
		[display(aFeature, aFeatureLanguage)/]
	[/if]
[/for]
[/file]
[/template]

[template public add(aFeature : Feature, aFeatureLanguage : FeatureLanguage)]
public String add[createName(aFeature)/]([paramList(aFeature, aFeatureLanguage)/]);
[/template]

[template public remove(aFeature : Feature, aFeatureLanguage : FeatureLanguage)]
public void remove[createName(aFeature)/]([paramList(aFeature, aFeatureLanguage)/]);
[/template]

[template public update(aFeature : Feature, aFeatureLanguage : FeatureLanguage)]
public String update[createName(aFeature)/]([paramList(aFeature, aFeatureLanguage)/]);
[/template]

[template public display(aFeature : Feature, aFeatureLanguage : FeatureLanguage)]
	[if (aFeature.characteristic.name.oclIsUndefined())] 
public TO[aFeature.concept.name.toUpperFirst()/] get[createName(aFeature)/]([paramList(aFeature, aFeatureLanguage)/]);
	[/if]
	[if (not aFeature.characteristic.name.oclIsUndefined())] 
public TO[aFeature.characteristic.name.toUpperFirst()/] get[createName(aFeature)/]([paramList(aFeature, aFeatureLanguage)/]);
	[/if]
[/template]

[template public createName(aFeature : Feature)]
[if ((not aFeature.characteristic.name.oclIsUndefined()) and (not aFeature.verb.toString().equalsIgnoreCase('Update')))]
[aFeature.characteristic.name.toUpperFirst()/][if (aFeature.verb.toString().equalsIgnoreCase('Add'))]To[/if][if ((aFeature.verb.toString().equalsIgnoreCase('Remove')) or (aFeature.verb.toString().equalsIgnoreCase('Display')))]From[/if][/if][aFeature.concept.name/]
[/template]

[template public paramList(aFeature : Feature, aFeatureLanguage : FeatureLanguage)]
[if (aFeature.verb.toString().equalsIgnoreCase('Add'))]
	[if (aFeature.characteristic.name.oclIsUndefined())]
[listCharacteristics(aFeature.concept)/][/if]
	[if (not aFeature.characteristic.name.oclIsUndefined())]
[findConceptKey(aFeature.concept, aFeatureLanguage)/], [findCharacteristicKey(aFeature.characteristic, aFeatureLanguage)/]
	[/if][/if]
[if (aFeature.verb.toString().equalsIgnoreCase('Remove'))]
	[if (aFeature.characteristic.name.oclIsUndefined())]
		[for (aKey : Key | aFeatureLanguage.keys)]
			[if (aKey.concept.name.equalsIgnoreCase(aFeature.concept.name))]
[aKey.characteristic.type.name/] [aKey.characteristic.name.toLowerFirst()/][/if][/for][/if]
	[if (not aFeature.characteristic.name.oclIsUndefined())]
[findConceptKey(aFeature.concept, aFeatureLanguage)/], [findCharacteristicKey(aFeature.characteristic, aFeatureLanguage)/][/if][/if]
[if (aFeature.verb.toString().equalsIgnoreCase('Update'))]
	[if (aFeature.characteristic.name.oclIsUndefined())] [comment should not happen/]
[listCharacteristics(aFeature.concept)/][/if]
	[if (not aFeature.characteristic.name.oclIsUndefined())]
		[for (aKey : Key | aFeatureLanguage.keys)]
			[if (aKey.concept.name.equalsIgnoreCase(aFeature.concept.name))]
[aKey.characteristic.type.name/] [aKey.characteristic.name.toLowerFirst()/], [aKey.characteristic.type.name/] new[aKey.characteristic.name.toUpperFirst()/][/if][/for][/if][/if]
[if (aFeature.verb.toString().equalsIgnoreCase('Display'))]
	[if (aFeature.characteristic.name.oclIsUndefined())] 
		[for (aKey : Key | aFeatureLanguage.keys)]
			[if (aKey.concept.name.equalsIgnoreCase(aFeature.concept.name))]
[aKey.characteristic.type.name/] [aKey.characteristic.name.toLowerFirst()/][/if][/for][/if]
	[if (not aFeature.characteristic.name.oclIsUndefined())]
[findConceptKey(aFeature.concept, aFeatureLanguage)/], [findCharacteristicKey(aFeature.characteristic, aFeatureLanguage)/][/if][/if]
[/template]

[template public listCharacteristics(aConcept : Concept)]
[for (aCharacteristic : Characteristic | aConcept.characteristics) separator (', ')][aCharacteristic.type.name/] [aCharacteristic.name.toLowerFirst()/][/for]
[/template]

[template public findConceptKey(aConcept : Concept, aFeatureLanguage : FeatureLanguage)]
	[for (aKey : Key | aFeatureLanguage.keys)]
		[if (aKey.concept.name.equalsIgnoreCase(aConcept.name))]
[aKey.characteristic.type.name/] [aConcept.name.toLowerFirst()/][aKey.characteristic.name.toUpperFirst()/]
		[/if]
	[/for]
[/template]

[template public findCharacteristicKey(aCharacteristic : Characteristic, aFeatureLanguage : FeatureLanguage)]
	[for (aKey : Key | aFeatureLanguage.keys)]
		[if (aKey.concept.name.equalsIgnoreCase(aCharacteristic.type.name))]
[aKey.characteristic.type.name/] [aKey.characteristic.name.toLowerFirst()/]
		[/if]
	[/for]
[/template]
